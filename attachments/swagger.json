{
  "openapi": "3.0.1",
  "info": {
    "title": "RFE REST API",
    "version": "v1.2"
  },
  "servers": [
    {
      "url": "/restapi/v1"
    }
  ],
  "paths": {
    "/Search/abstracts": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Abstract of content",
        "description": "Retrieves one or more abstracts given a comma-separated list of content ids.",
        "parameters": [
          {
            "name": "Ids",
            "in": "query",
            "description": "Content Ids (comma separated identifiers)",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AbstractModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/ChromeExtension/parsingRules": {
      "get": {
        "tags": [
          "ChromeExtension"
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SiteParsingRuleModelArraySuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteParsingRuleModelArraySuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SiteParsingRuleModelArraySuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Citations/parse": {
      "post": {
        "tags": [
          "Citations"
        ],
        "summary": "Parse citations",
        "description": "Parses citation data given free-form text and then does a citation search to match up the citation with a single content record.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ParseCitationsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ParseCitationsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ParseCitationsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ParseCitationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Citations/parseOpenURL": {
      "post": {
        "tags": [
          "Citations"
        ],
        "summary": "Parse OpenURL citation",
        "description": "Parses citation data in OpenURL format. OpenURL formats that RFE supports are covered in this document: https://docs.google.com/a/pubget.com/viewer?a=v&pid=sites&srcid=cHViZ2V0LmNvbXxtb2JpbGUtbGlicmFyeXxneDo1ZDY3ZDg2ZmYyZjUwMTRk",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "ATitle": {
                    "type": "string"
                  },
                  "Title": {
                    "type": "string"
                  },
                  "Volume": {
                    "type": "string"
                  },
                  "Issue": {
                    "type": "string"
                  },
                  "Date": {
                    "type": "string"
                  },
                  "SPage": {
                    "type": "string"
                  },
                  "EPage": {
                    "type": "string"
                  },
                  "AuLast": {
                    "type": "string"
                  },
                  "AuFirst": {
                    "type": "string"
                  },
                  "AuInit": {
                    "type": "string"
                  },
                  "AuInit1": {
                    "type": "string"
                  },
                  "AuInitm": {
                    "type": "string"
                  },
                  "Suffix": {
                    "type": "string"
                  },
                  "Issn": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "ATitle": {
                  "style": "form"
                },
                "Title": {
                  "style": "form"
                },
                "Volume": {
                  "style": "form"
                },
                "Issue": {
                  "style": "form"
                },
                "Date": {
                  "style": "form"
                },
                "SPage": {
                  "style": "form"
                },
                "EPage": {
                  "style": "form"
                },
                "AuLast": {
                  "style": "form"
                },
                "AuFirst": {
                  "style": "form"
                },
                "AuInit": {
                  "style": "form"
                },
                "AuInit1": {
                  "style": "form"
                },
                "AuInitm": {
                  "style": "form"
                },
                "Suffix": {
                  "style": "form"
                },
                "Issn": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Citations/parseOpenURLXml": {
      "post": {
        "tags": [
          "Citations"
        ],
        "summary": "Parse OpenURL citations",
        "description": "Same as parseOpenURL API call except that the citation data is passed in XML format. The method supports parsing of more than one citations.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "xmlCitation": {
                    "type": "string"
                  }
                }
              },
              "encoding": {
                "xmlCitation": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/CiteItGlobalStorage/{id}": {
      "get": {
        "tags": [
          "CiteItGlobalStorage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CiteItGlobalStorage"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemFromBodyParams"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemFromBodyParams"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemFromBodyParams"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateItemFromBodyParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/CiteItGlobalStorage/batch": {
      "get": {
        "tags": [
          "CiteItGlobalStorage"
        ],
        "parameters": [
          {
            "name": "Ids",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoArraySuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoArraySuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoArraySuccessResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "CiteItGlobalStorage"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateItemFromBodyParams"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateItemFromBodyParams"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateItemFromBodyParams"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateItemFromBodyParams"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoArraySuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoArraySuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoArraySuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/CiteItGlobalStorage": {
      "post": {
        "tags": [
          "CiteItGlobalStorage"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemFromBodyParams"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemFromBodyParams"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemFromBodyParams"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemFromBodyParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/CiteItGlobalStorage/upsert": {
      "post": {
        "tags": [
          "CiteItGlobalStorage"
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemFromBodyParams"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemFromBodyParams"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemFromBodyParams"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateItemFromBodyParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalStorageItemInfoSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/info": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Client information",
        "description": "Returns client information.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ClientInfoSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientInfoSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientInfoSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/users": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Users",
        "description": "Lists all the users in the client.",
        "parameters": [
          {
            "name": "Email",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoIEnumerableSuccessPagedInfoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoIEnumerableSuccessPagedInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoIEnumerableSuccessPagedInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/users/{userIdOrEmail}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "User",
        "description": "Lists user information about a specific user for the client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userIdOrEmail",
            "in": "path",
            "description": "Required. User Id or email",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/divisions": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Divisions",
        "description": "Lists all the divisions for the client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/divisions/{divisionId}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Division",
        "description": "Lists division information for a specific division in the client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "divisionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DivisionModelSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/divisions/{divisionId}/departments": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Departments",
        "description": "Lists all the departments for a specific division in the client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "divisionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/divisions/{divisionId}/departments/{departmentId}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Department",
        "description": "Lists department information for a specific department in the client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "divisionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "departmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentModelSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/locations": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Locations",
        "description": "Lists all the locations for the client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/locations/{locationId}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "Location",
        "description": "Lists location information for a specific location in the client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LocationModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationModelSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/userGroups": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "User groups",
        "description": "Lists all the user groups for the client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeUserInfo",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Client/userGroups/{userGroupId}": {
      "get": {
        "tags": [
          "Client"
        ],
        "summary": "User group",
        "description": "Lists user group information for a specific user group in the client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userGroupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserGroupModelSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/CSL/renderBibliography": {
      "post": {
        "tags": [
          "CSL"
        ],
        "summary": "Render bibliography",
        "description": "Renders bibliography.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CSLRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CSLRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CSLRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CSLRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/CSL/renderCitations": {
      "post": {
        "tags": [
          "CSL"
        ],
        "summary": "Render citations",
        "description": "Renders citations.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CSLCitationsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CSLCitationsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CSLCitationsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CSLCitationsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/CSL/lookup": {
      "get": {
        "tags": [
          "CSL"
        ],
        "summary": "Style lookup",
        "description": "Searches for CSL styles by title prefix.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "Title prefix",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CSLStyleModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CSLStyleModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CSLStyleModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Delivery/{orderId}": {
      "get": {
        "tags": [
          "Delivery"
        ],
        "summary": "Order delivery",
        "description": "Retrieves document link",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order link",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryInfoModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryInfoModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeliveryInfoModelSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Delivery/{orderId}/file": {
      "get": {
        "tags": [
          "Delivery"
        ],
        "summary": "Order content",
        "description": "Retrieves document content",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File"
          }
        }
      }
    },
    "/Genres": {
      "get": {
        "tags": [
          "Genres"
        ],
        "summary": "All genres",
        "description": "Lists all the RFE supported genres.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/GenreIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenreIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenreIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Library/shared": {
      "get": {
        "tags": [
          "Library"
        ],
        "summary": "Shared libraries",
        "description": "Retrieves list of shared libraries available for the user.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryInfoModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryInfoModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryInfoModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Library/documents/{libraryDocumentId}": {
      "get": {
        "tags": [
          "Library"
        ],
        "summary": "Document",
        "description": "Retrieves the contents of the specified library document.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "libraryDocumentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ByteArraySuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ByteArraySuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ByteArraySuccessResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Library"
        ],
        "summary": "Update document",
        "description": "Updates an existing personal library document.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "libraryDocumentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "deleteContentsWhenNull",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryDocumentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryDocumentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryDocumentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentInfoModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentInfoModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentInfoModelSuccessResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Library"
        ],
        "summary": "Delete document",
        "description": "Deletes the specified personal library document.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "libraryDocumentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Library/documents": {
      "get": {
        "tags": [
          "Library"
        ],
        "summary": "Documents",
        "description": "Retrieves the specified library documents.",
        "parameters": [
          {
            "name": "Ids",
            "in": "query",
            "description": "Comma-separated list of library document ids.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Library"
        ],
        "summary": "Add document",
        "description": "Adds a new library document. It doesn't require special permissions because it's used by browser plugins.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryDocumentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryDocumentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryDocumentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LibraryDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentInfoModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentInfoModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentInfoModelSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Library/documents/query": {
      "post": {
        "tags": [
          "Library"
        ],
        "summary": "Document info",
        "description": "Retrieves information about a specified set of library documents.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/GetDocumentInfoRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDocumentInfoRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/GetDocumentInfoRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/GetDocumentInfoRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentExtOutIEnumerableSuccessPagedInfoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentExtOutIEnumerableSuccessPagedInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryDocumentExtOutIEnumerableSuccessPagedInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Library/documents/match": {
      "post": {
        "tags": [
          "Library"
        ],
        "summary": "View if a document(s) has been shared and to which library",
        "description": "Gets a list of libraries to which the specified set of documents is shared.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDocumentRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDocumentRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDocumentRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/MatchDocumentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentLibrariesModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentLibrariesModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentLibrariesModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Library/documents/{libraryDocumentId}/tags": {
      "post": {
        "tags": [
          "Library"
        ],
        "summary": "Set document tags",
        "description": "Updates tags for an existing document.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "libraryDocumentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SetDocumentTagsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDocumentTagsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SetDocumentTagsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SetDocumentTagsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Library/documents/{libraryDocumentId}/share": {
      "get": {
        "tags": [
          "Library"
        ],
        "summary": "Share document",
        "description": "Shares personal library document with library.",
        "parameters": [
          {
            "name": "LibraryId",
            "in": "query",
            "description": "Shared library Id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PublishTags",
            "in": "query",
            "description": "Optional. Publish tags with shared copy. Default is true",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "libraryDocumentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Library/customfields": {
      "get": {
        "tags": [
          "Library"
        ],
        "summary": "Custom field sets",
        "description": "Retrieves a list of the shared library field sets available to the user’s client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32LibraryFieldSetIDictionarySuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32LibraryFieldSetIDictionarySuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32LibraryFieldSetIDictionarySuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Library/{libraryId}/tags": {
      "get": {
        "tags": [
          "Library"
        ],
        "summary": "Gets tags for the specified library",
        "description": "Performs a library tag search",
        "parameters": [
          {
            "name": "libraryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "description": "Filter with which library tag names should contain.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchPatternType",
            "in": "query",
            "description": "Type of tag search pattern specified in Filter. Default value is Contains.",
            "schema": {
              "$ref": "#/components/schemas/SearchPatternType"
            }
          },
          {
            "name": "TagsSort",
            "in": "query",
            "description": "Value indicating sort order. Must be either `TAGS_SORT_BY_FREQUENCY` or `TAGS_SORT_ALPHABETICALLY`. Default value is `TAGS_SORT_BY_FREQUENCY`.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AppliedTags",
            "in": "query",
            "description": "Tags that should be excluded from search results.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Page number (1-based). Default value is 1.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size. Default value is 20.",
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of library tags",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryTagModelIEnumerableSuccessPagedInfoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryTagModelIEnumerableSuccessPagedInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LibraryTagModelIEnumerableSuccessPagedInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Orders",
        "description": "Retrieves detailed information about previously placed requests/orders based on the start and end dates",
        "parameters": [
          {
            "name": "StartDate",
            "in": "query",
            "description": "Required. The date at which to start the search.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "EndDate",
            "in": "query",
            "description": "Required. The date at which to end the search.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "StatusFilter",
            "in": "query",
            "description": "Optional. Order statuses. Default value is [all]. Comma-separated list of possible values: Unknown, New, ManualRefClient, ManualRef, Clearance, ManualClearance, Sourcing, ManualSourcing, PendingFulfillment, PendingQA, PendingDelivery, ManualDelivery, Suspended, Completed, Cancelled, Void, CancelledTest, ClosedTest, Invoiced.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderUser",
            "in": "query",
            "description": "Optional. Order owner (user Id or email).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OrderCreatedBy",
            "in": "query",
            "description": "Optional. Order creator (user Id or email).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ContentIds",
            "in": "query",
            "description": "Optional. Filter by content Ids (comma-separated list).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Page number (1-based). Default value is 1.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size. Default value is 20.",
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of orders",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderIEnumerableSuccessPagedInfoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderIEnumerableSuccessPagedInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderIEnumerableSuccessPagedInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Orders/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Order details",
        "description": "Retrieves detailed information about the specified order",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order information",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Orders/{orderId}/status": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Order status",
        "description": "Retrieves the current status of a previously placed request/order based on the RFE Request/Order Id",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order status",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Orders/{orderId}/cancel": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Cancel order",
        "description": "Cancels a previously placed order, when possible, based on the RightFind Request/Order Id.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Required. The RightFind request/order id of the request/order to cancel",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Cancellation result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCancelResultSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCancelResultSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCancelResultSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Orders/{orderId}/continue": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Continue order",
        "description": "Resumes a previously suspended order based on the RightFind Request/Order Id.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderId",
            "in": "path",
            "description": "Required. The RightFind request/order id of the request/order to resume",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Orders/sources": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Sources",
        "description": "Retrieves linkouts to a specified article or publication.",
        "parameters": [
          {
            "name": "UseId",
            "in": "query",
            "description": "Optional. When omitted or zero, the intended usage of the content is not considered. All available linkouts for collections the user has access to will be returned. Otherwise, this parameter should be set to the unique id of the rights alias that describes the user's intended use of the content. In this case, only linkouts from collections that provide for such use will be returned.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ContentId",
            "in": "query",
            "description": "The unique id of the content item for which linkouts should be retured.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Sources",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ExtOrderSourceIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtOrderSourceIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtOrderSourceIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Orders/placeOrderLink": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Place Order Link",
        "description": "Creates hashed Place Order deep link URL.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceOrderLink"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceOrderLink"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceOrderLink"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/PlaceOrderLink"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOrderLinkResultSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOrderLinkResultSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlaceOrderLinkResultSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Orders/placeOrder": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Place order",
        "description": "Places order for one article or publication. Provide an RFE content id or as full a citation as possible.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrder"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrder"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrder"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrder"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/NewOrderResultSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewOrderResultSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewOrderResultSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Orders/preview": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Order Preview",
        "description": "Returns preview information about an order.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Qlu",
            "in": "query",
            "description": "Required if no ContentId provided. Citation search expression.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Option",
            "in": "query",
            "description": "Optional. Order preview option, defaults is both.",
            "schema": {
              "$ref": "#/components/schemas/OrderPreviewOption"
            }
          },
          {
            "name": "ContentId",
            "in": "query",
            "description": "Required if no Qlu provided. Search by ContentId (Catalog Id).",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Operation result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderPreviewResultSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderPreviewResultSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderPreviewResultSuccessResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Order Preview",
        "description": "Returns preview information about an order.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPreview"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPreview"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPreview"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/OrderPreview"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation result",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/OrderPreviewResultSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderPreviewResultSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderPreviewResultSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/PlatformInfo": {
      "get": {
        "tags": [
          "PlatformInfo"
        ],
        "summary": "Platform Info",
        "description": "Returns platform and version information for the REST API.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Platform info",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformInfoSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformInfoSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlatformInfoSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/PlatformInfo/proxySettings": {
      "get": {
        "tags": [
          "PlatformInfo"
        ],
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "cultureId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProxySettingsSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxySettingsSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProxySettingsSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Rights/aliases": {
      "get": {
        "tags": [
          "Rights"
        ],
        "summary": "Rights aliases",
        "description": "Retrieves a list of all defined rights aliases or rights aliases that the authorizing user has access to.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientAccess",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RightsAliasModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RightsAliasModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RightsAliasModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Rights/summary": {
      "post": {
        "tags": [
          "Rights"
        ],
        "summary": "Rights summary",
        "description": "Retrieves the Rights Summary information for a given content.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RightsSummaryRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RightsSummaryRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RightsSummaryRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RightsSummaryRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RightsSummaryModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RightsSummaryModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RightsSummaryModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Rights/request": {
      "post": {
        "tags": [
          "Rights"
        ],
        "summary": "Rights",
        "description": "Retrieves a list of all allowable uses for the specified article when used by the specified users. Allowable uses can be limited to those provided by internal collections only or all collections. Provide either a RFE content id or a citation that is as complete as possible.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RightsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RightsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RightsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RightsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UsageRightIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageRightIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageRightIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Rights/usages/register": {
      "post": {
        "tags": [
          "Rights"
        ],
        "summary": "Register usage",
        "description": "Registers with RFE a set of document usages that took place external to RFE (allowing RFE to include the specified usages in its audit trail and reporting).",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUsagesRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUsagesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUsagesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterUsagesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UsageRegistrationResultSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageRegistrationResultSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageRegistrationResultSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Search/semantic": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Semantic Search",
        "description": "Performs a semantic search. The identify user must have this functionality enabled. The syntax of the search is a \"home-grown\" syntax in which each semantic term is in the form of {Vocab}.{Descriptor}.",
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "description": "Enter search query. Vocabulary name and descriptor/synonym text should be separated by period. Example value: (drug.aspirin or adventmed.\"paracetamol increased\") and not ibuprofen",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "FieldIds",
            "in": "query",
            "description": "Content fields to search. Default value is \"AllMetadata, Abstract, LibraryFullText\". Comma-separated list of possible values: AllMetadata, Abstract, LibraryFullText, FullText.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DateRange",
            "in": "query",
            "description": "Publication date filter. Default value: ALL. Possible values: ALL, CURYEAR (this year), LAST2 (last 2 years), LAST5 (last 5 years), LAST10 (last 10 years), LAST1M (last month), LAST3M (last 3 months), LAST6M (last 6 months), LAST12M (last 12 months), CUSTOM",
            "schema": {
              "$ref": "#/components/schemas/SearchPubDateRange"
            }
          },
          {
            "name": "PubStart",
            "in": "query",
            "description": "Start publication date. Used when DateRange = CUSTOM. Format: YYYY (2018) or YYYYMM (201710)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PubEnd",
            "in": "query",
            "description": "End publication date. Used when DateRange = CUSTOM. Format: YYYY (2018) or YYYYMM (201710)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Genres",
            "in": "query",
            "description": "Content genres. Default value is [all]. Comma-separated list of possible values: [all], 0 (unknown), 1 (journal), 2 (book), 3 (patent), 4 (proceeding), 5 (bookitem), 6 (issue), 7 (article), 8 (conference), 9 (report), 10 (preprint), 11 (document), 19 (conference paper or section)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Sorting. Default value is \"Relevant\".",
            "schema": {
              "$ref": "#/components/schemas/SearchSorting"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "description": "Sort direction. Default value is \"Default\".",
            "schema": {
              "$ref": "#/components/schemas/ContentSearchSortDir"
            }
          },
          {
            "name": "AZFilter",
            "in": "query",
            "description": "Prefix title filter. Default value is no filter. Title starts with letter (A-Z).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeAbstracts",
            "in": "query",
            "description": "Include abstract to each content in the response. Default value is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAltTitles",
            "in": "query",
            "description": "Include alternative titles to each content in the response. Default value is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeParentData",
            "in": "query",
            "description": "Include parent data to each content in the response. Default value is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "AddPrePubInPubDate",
            "in": "query",
            "description": "Adds \"prepub\" or \"present\" to the Publication Date. Default value is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Page number (1-based). Default value is 1.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size. Default value is 20.",
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of content (citation information)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessPagedInfoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessPagedInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessPagedInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Search/citation": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Citation Search",
        "description": "Performs a citation search. Citation searches are a different mode of searching than RFE's query mode. A way of looking at this is that on the Content Request Form, a citation search is performed whereas on the Search page, a query search is performed. This API call mirrors the citation search functionality of the Content Request Form.",
        "parameters": [
          {
            "name": "Title",
            "in": "query",
            "description": "Title",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "StdNum",
            "in": "query",
            "description": "ISSN / ISBN / Etc.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "PubName",
            "in": "query",
            "description": "Pub Name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Pages",
            "in": "query",
            "description": "Pages",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Volume",
            "in": "query",
            "description": "Volume",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Issue",
            "in": "query",
            "description": "Issue",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DOI",
            "in": "query",
            "description": "DOI",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Date",
            "in": "query",
            "description": "Pub Date",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Sup",
            "in": "query",
            "description": "Supplement",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Author",
            "in": "query",
            "description": "Author(s)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Publisher",
            "in": "query",
            "description": "Publisher",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AltId",
            "in": "query",
            "description": "Alt. Id (pmid, etc.)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ConfDocType",
            "in": "query",
            "description": "Conference Document Type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "AbstractNum",
            "in": "query",
            "description": "Abstract Number",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Genres",
            "in": "query",
            "description": "Content genres. Default value is [all]. Comma-separated list of possible values: [all], 0 (unknown), 1 (journal), 2 (book), 3 (patent), 4 (proceeding), 5 (bookitem), 6 (issue), 7 (article), 8 (conference), 9 (report), 10 (preprint), 11 (document), 19 (conference paper or section)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Sorting. Default value is \"Relevant\".",
            "schema": {
              "$ref": "#/components/schemas/SearchSorting"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "description": "Sort direction. Default value is \"Default\".",
            "schema": {
              "$ref": "#/components/schemas/ContentSearchSortDir"
            }
          },
          {
            "name": "AZFilter",
            "in": "query",
            "description": "Prefix title filter. Default value is no filter. Title starts with letter (A-Z).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeAbstracts",
            "in": "query",
            "description": "Include abstract to each content in the response. Default value is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAltTitles",
            "in": "query",
            "description": "Include alternative titles to each content in the response. Default value is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeParentData",
            "in": "query",
            "description": "Include parent data to each content in the response. Default value is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "AddPrePubInPubDate",
            "in": "query",
            "description": "Adds \"prepub\" or \"present\" to the Publication Date. Default value is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Page number (1-based). Default value is 1.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size. Default value is 20.",
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of content (citation information)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessPagedInfoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessPagedInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessPagedInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Search/query": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Lucene Syntax Search",
        "description": "Performs search of content. This is Lucene query API call documented here: <a href=\"../documents/RFE Catalog Query REST API.pdf\">RFE Catalog Query REST API</a>.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LuceneSearchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LuceneSearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LuceneSearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LuceneSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Array of content (citation information)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessLuceneSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessLuceneSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessLuceneSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Search/query-ext": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Version of Lucene Syntax Search with reduced set of parameters and open for any authorized user",
        "description": "Performs search of content. This is Lucene query API call documented here: <a href=\"../documents/RFE Catalog Query REST API.pdf\">RFE Catalog Query REST API</a>.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleLuceneSearchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleLuceneSearchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleLuceneSearchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleLuceneSearchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Array of content (citation information)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessLuceneSearchResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessLuceneSearchResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessLuceneSearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Search/contentDescriptors": {
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Content Descriptors",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ContentDescriptorsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentDescriptorsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ContentDescriptorsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ContentDescriptorsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDescriptorsModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDescriptorsModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContentDescriptorsModelSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Search/collections": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Holding collections",
        "description": "Retrieves a list of content holdings collections optionally filtered by what a specified user has access to.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "clientAccess",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Int32StringDictionarySuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32StringDictionarySuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Int32StringDictionarySuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Search/terms": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search Terms",
        "description": "Performs a semantic term lookup for synonyms, descriptors, and vocabularies by prefix match. This API call is equivalent to what the UI uses when populating the search box with suggested terms.",
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "description": "Search string",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Maximum number of results. Default value is 10",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of prefix matched terms",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LookupTermIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupTermIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupTermIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Search/term": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search Term",
        "parameters": [
          {
            "name": "Vocabulary",
            "in": "query",
            "description": "Vocabulary Id, Vocabulary Guid or name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Descriptor",
            "in": "query",
            "description": "Descriptor Id, Topic Guid or name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LookupTermSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupTermSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupTermSuccessResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Search"
        ],
        "summary": "Search Term(s)",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TermDefinition"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TermDefinition"
                }
              }
            },
            "text/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TermDefinition"
                }
              }
            },
            "application/*+json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TermDefinition"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/LookupTermIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupTermIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookupTermIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Search/suggestions": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Free text suggestions",
        "description": "It doesn't require special permissions because it's used by browser plugins.",
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "description": "Search string",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Maximum number of results. Default value is 10",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/StringIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/StringIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Search/suggestions-ext": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Free text suggestions",
        "description": "It doesn't require special permissions because it's used by browser plugins.",
        "parameters": [
          {
            "name": "Search",
            "in": "query",
            "description": "Search string",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Count",
            "in": "query",
            "description": "Maximum number of results. Default value is 10",
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestionIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestionIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchSuggestionIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/TOC/{contentId}/volumes": {
      "get": {
        "tags": [
          "TOC"
        ],
        "summary": "Volumes of table of content",
        "description": "Lists all the volumes for a specific parent content record for a given year.",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Year",
            "in": "query",
            "description": "Year",
            "schema": {
              "maximum": 9999,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TOCVolumeSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCVolumeSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCVolumeSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/TOC/{contentId}/issues": {
      "get": {
        "tags": [
          "TOC"
        ],
        "summary": "Issues of table of content",
        "description": "Lists all the issues for a specific parent content record for a given volume and year.",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Volume",
            "in": "query",
            "description": "Volume",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Year",
            "in": "query",
            "description": "Year",
            "schema": {
              "maximum": 9999,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TOCIssueSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCIssueSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCIssueSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/TOC/{contentId}/years": {
      "get": {
        "tags": [
          "TOC"
        ],
        "summary": "Years of table of content",
        "description": "Lists all the years for a specific parent content record.",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TOCYearSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCYearSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCYearSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/TOC/{contentId}/content": {
      "get": {
        "tags": [
          "TOC"
        ],
        "summary": "Articles of table of content",
        "description": "Lists all the content for a specific parent content record for given year, volume, and issue.",
        "parameters": [
          {
            "name": "contentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "MaxResultCount",
            "in": "query",
            "description": "Max result count. Default value is 100",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Issue",
            "in": "query",
            "description": "Issue",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Volume",
            "in": "query",
            "description": "Volume",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Year",
            "in": "query",
            "description": "Year",
            "schema": {
              "maximum": 9999,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TOCArticlesSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCArticlesSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCArticlesSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/TOC/by{altIdName}/{altIdValue}/volumes": {
      "get": {
        "tags": [
          "TOC"
        ],
        "summary": "Volumes of table of content by alternate id",
        "description": "Variant Volumes API call in which the parent content record is specified by either ISSN, ISBN, or StdNum.",
        "parameters": [
          {
            "name": "altIdName",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TOCAltId"
            }
          },
          {
            "name": "altIdValue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Year",
            "in": "query",
            "description": "Year",
            "schema": {
              "maximum": 9999,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TOCVolumeSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCVolumeSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCVolumeSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/TOC/by{altIdName}/{altIdValue}/issues": {
      "get": {
        "tags": [
          "TOC"
        ],
        "summary": "Issues of table of content by alternate id",
        "description": "Variant Issues API call in which the parent content record is specified by either ISSN, ISBN, or StdNum.",
        "parameters": [
          {
            "name": "altIdName",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TOCAltId"
            }
          },
          {
            "name": "altIdValue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Volume",
            "in": "query",
            "description": "Volume",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Year",
            "in": "query",
            "description": "Year",
            "schema": {
              "maximum": 9999,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TOCIssueSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCIssueSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCIssueSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/TOC/by{altIdName}/{altIdValue}/years": {
      "get": {
        "tags": [
          "TOC"
        ],
        "summary": "Years of table of content by alternate id",
        "description": "Variant Years API call in which the parent content record is specified by either ISSN, ISBN, or StdNum.",
        "parameters": [
          {
            "name": "altIdName",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TOCAltId"
            }
          },
          {
            "name": "altIdValue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TOCYearSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCYearSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCYearSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/TOC/by{altIdName}/{altIdValue}/content": {
      "get": {
        "tags": [
          "TOC"
        ],
        "summary": "Articles of table of content by alternate id",
        "description": "Variant TOC Content API call in which the parent content record is specified by either ISSN, ISBN, or StdNum.",
        "parameters": [
          {
            "name": "altIdName",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/TOCAltId"
            }
          },
          {
            "name": "altIdValue",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "MaxResultCount",
            "in": "query",
            "description": "Max result count. Default value is 100",
            "schema": {
              "maximum": 1000,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Issue",
            "in": "query",
            "description": "Issue",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Volume",
            "in": "query",
            "description": "Volume",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Year",
            "in": "query",
            "description": "Year",
            "schema": {
              "maximum": 9999,
              "minimum": 0,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TOCArticlesSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCArticlesSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TOCArticlesSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/token": {
      "get": {
        "tags": [
          "Token"
        ],
        "parameters": [
          {
            "name": "grant_type",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/GrantType"
            }
          },
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "refresh_token",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "app",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/JsonWebToken"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonWebToken"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonWebToken"
                }
              }
            }
          }
        }
      }
    },
    "/Users": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Users",
        "description": "Lists all the users in current client.",
        "parameters": [
          {
            "name": "PageNumber",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoIEnumerableSuccessPagedInfoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoIEnumerableSuccessPagedInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoIEnumerableSuccessPagedInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Users/{email}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User",
        "description": "Lists user information about a specific user for the client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInfoSuccessResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "New or existing user",
        "description": "Adds or updates a user",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "path",
            "description": "Required. Email address of the user to be added or updated. Email address must be unique.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User information",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/Users/{email}/status": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "User status",
        "description": "Returns user status.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatusSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatusSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserStatusSuccessResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "User status",
        "description": "Sets user status.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AppUserLockoutStatus"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppUserLockoutStatus"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AppUserLockoutStatus"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AppUserLockoutStatus"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/search": {
      "get": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Search",
        "description": "Performs search for Cite It. Similar to RFE basic search but with changed defaults and normalized authors.",
        "parameters": [
          {
            "name": "LibraryIds",
            "in": "query",
            "description": "Comma-separated list of library (with prefix L) or collection (with prefix C) identifiers to search within.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchMethod",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/ContentSearchMethod"
            }
          },
          {
            "name": "Tags",
            "in": "query",
            "description": "Set of values specifying that the search should be performed on values containing these tags.",
            "style": "form",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "TagsOperator",
            "in": "query",
            "description": "Indicates which logical binary operation will be used to join the tags. Default value is \"And\".",
            "schema": {
              "$ref": "#/components/schemas/TagsOperatorType"
            }
          },
          {
            "name": "ExcludeTags",
            "in": "query",
            "description": "Logical unary operator Not. Default value is null.\r\nIf <b>Tags is not empty</b> and <b>ExcludeTags is false or null</b>, it indicates that the search <b>should include</b> documents <b>with the specified tags</b>.\r\nIf <b>Tags is not empty</b> and <b>ExcludeTags is true</b>, it indicates that the search <b>should exclude</b> documents <b>with the specified tags</b>.\r\nIf <b>Tags is empty</b> and <b>ExcludeTags is false</b>, it indicates that the search should include documents <b>without tags</b>.\r\nIf <b>Tags is empty</b> and <b>ExcludeTags is true</b>, it indicates that the search should include all documents that have <b>at least one tag</b>.\r\nIf <b>Tags is empty</b> and <b>ExcludeTags is null</b>, then <b>no filter</b> is applied.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Search",
            "in": "query",
            "description": "Known item search. Enter Title, Keywords, PMID, ISSN, ISBN, Authors, etc",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "DateRange",
            "in": "query",
            "description": "Publication date filter. Default value: ALL. Possible values: ALL, CURYEAR (this year), LAST2 (last 2 years), LAST5 (last 5 years), LAST10 (last 10 years), LAST1M (last month), LAST3M (last 3 months), LAST6M (last 6 months), LAST12M (last 12 months), CUSTOM",
            "schema": {
              "$ref": "#/components/schemas/SearchPubDateRange"
            }
          },
          {
            "name": "PubStart",
            "in": "query",
            "description": "Start publication date. Used when DateRange = CUSTOM. Format: YYYY (2018) or YYYYMM (201710)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PubEnd",
            "in": "query",
            "description": "End publication date. Used when DateRange = CUSTOM. Format: YYYY (2018) or YYYYMM (201710)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "FieldIds",
            "in": "query",
            "description": "Content fields to search. Default value: \"AllMetadata, Abstract, LibraryFullText\". Comma-separated list of possible values: AllMetadata, Abstract, LibraryFullText.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Genres",
            "in": "query",
            "description": "Content genres. Default value is [all]. Comma-separated list of possible values: [all], 0 (unknown), 1 (journal), 2 (book), 3 (patent), 4 (proceeding), 5 (bookitem), 6 (issue), 7 (article), 8 (conference), 9 (report), 10 (preprint), 11 (document), 19 (conference paper or section)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "description": "Sorting. Default value is \"Relevant\".",
            "schema": {
              "$ref": "#/components/schemas/SearchSorting"
            }
          },
          {
            "name": "SortDir",
            "in": "query",
            "description": "Sort direction. Default value is \"Default\".",
            "schema": {
              "$ref": "#/components/schemas/ContentSearchSortDir"
            }
          },
          {
            "name": "AZFilter",
            "in": "query",
            "description": "Prefix title filter. Default value is no filter. Title starts with letter (A-Z).",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IncludeAbstracts",
            "in": "query",
            "description": "Include abstract to each content in the response. Default value is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeAltTitles",
            "in": "query",
            "description": "Include alternative titles to each content in the response. Default value is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IncludeParentData",
            "in": "query",
            "description": "Include parent data to each content in the response. Default value is false.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "AddPrePubInPubDate",
            "in": "query",
            "description": "Adds \"prepub\" or \"present\" to the Publication Date. Default value is true.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "PageNumber",
            "in": "query",
            "description": "Page number (1-based). Default value is 1.",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "description": "Page size. Default value is 20.",
            "schema": {
              "maximum": 200,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "Array of content (citation information)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessPagedInfoResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessPagedInfoResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessPagedInfoResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/searchDocuments": {
      "get": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Search Library Documents",
        "description": "Gets library documents by provided ids and formats results as Search method does.",
        "parameters": [
          {
            "name": "Ids",
            "in": "query",
            "description": "Comma-separated list of library document ids.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "Array of content (citation information)",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchMatchIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/styles": {
      "get": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Get Styles",
        "description": "Gets citation CSL styles available for the current user.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "Array of citation styles",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginCitationStyleModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginCitationStyleModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginCitationStyleModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Sync Styles",
        "description": "Gets citation CSL styles synchronization information.",
        "parameters": [
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CSLStylesRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CSLStylesRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CSLStylesRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CSLStylesRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Style synchonization info: which styles to upsert and which ones to delete",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginSynchronizedStylesModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginSynchronizedStylesModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginSynchronizedStylesModelSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/customStyles": {
      "get": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Get Custom Styles",
        "description": "Gets citation CSL styles available for the current user.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "Array of citation styles",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CitationCustomStyleModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CitationCustomStyleModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CitationCustomStyleModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/mappings": {
      "get": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Get Mappings",
        "description": "Gets word mappings configured for the current client.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "Word mappings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginMappingsModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginMappingsModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginMappingsModelSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/settings": {
      "get": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Get Settings",
        "description": "Gets Cite It settings",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "Cite It settings",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginRemoteSettingsSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginRemoteSettingsSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/WordPluginRemoteSettingsSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/log": {
      "post": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Log",
        "description": "Saves logs to file",
        "parameters": [
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/LogsRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogsRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/LogsRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/LogsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logs saved to file",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/logCiteItEvent": {
      "post": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Log Cite It event.",
        "parameters": [
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "requestBody": {
          "description": "Data collected on the Cite It.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CiteItEventRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CiteItEventRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CiteItEventRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CiteItEventRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Event saved to file.",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/libraries": {
      "get": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Shared and digital libraries",
        "description": "Retrieves list of shared and digital libraries available for the user.",
        "parameters": [
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SearchLibraryModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchLibraryModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchLibraryModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/checkVersion": {
      "get": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Checks if Cite It version needs to be updated.",
        "parameters": [
          {
            "name": "clientId",
            "in": "query",
            "description": "Client Id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "Cite It version.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/normalizeTitle": {
      "get": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Normalizes a title using PubMed and Amazon Comprehend named entity recognition.",
        "description": "Normalizes a title using Amazon Comprehend service to sentence case.",
        "parameters": [
          {
            "name": "Pmid",
            "in": "query",
            "description": "PubMed identifier.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "OriginalTitle",
            "in": "query",
            "description": "Original publication/article title to normalize.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "RFE-User-Identity",
            "in": "header",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "Normalization response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TitleNormalizationModelSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TitleNormalizationModelSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TitleNormalizationModelSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/normalizeTitles": {
      "post": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Normalizes a set of titles using PubMed and Amazon Comprehend named entity recognition.",
        "description": "Normalizes a set of titles using Amazon Comprehend service to sentence case.",
        "parameters": [
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BatchTitleNormalizationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchTitleNormalizationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchTitleNormalizationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BatchTitleNormalizationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Normalization response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/TitleNormalizationModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TitleNormalizationModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/TitleNormalizationModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/WordPlugin/normalizeAuthors": {
      "post": {
        "tags": [
          "WordPlugin"
        ],
        "summary": "Normalizes a set of authors using PubMed and Amazon Comprehend named entity recognition.",
        "description": "Normalizes a set of authors using Amazon Comprehend service to sentence case.",
        "parameters": [
          {
            "name": "v",
            "in": "query",
            "description": "Specify CiteIt version as string. Optional parameter."
          },
          {
            "name": "p",
            "in": "query",
            "description": "Specify client platform. Optional parameter."
          },
          {
            "name": "product",
            "in": "query",
            "description": "Specify client product type. Optional parameter."
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAuthorNormalizationRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAuthorNormalizationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAuthorNormalizationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BatchAuthorNormalizationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Normalization response",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorNormalizationModelIEnumerableSuccessResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorNormalizationModelIEnumerableSuccessResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthorNormalizationModelIEnumerableSuccessResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "APIResponseStatus": {
        "enum": [
          "Success",
          "Error"
        ],
        "type": "string",
        "description": "0: Success\r\n\r\n1: Error\r\n\r\n"
      },
      "AbstractModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AbstractModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AbstractModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AggregateDescriptor": {
        "type": "object",
        "properties": {
          "aggregateCount": {
            "type": "integer",
            "format": "int32"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "descriptorId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "topicGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "descriptorName": {
            "type": "string",
            "nullable": true
          },
          "vocabularyId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "vocabularyGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "vocabularyName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/SearchBlockType"
          },
          "marker": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AppUserLockoutStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: NotLockedOut\r\n\r\n1: LockedOut\r\n\r\n2: RequiresValidation\r\n\r\n",
        "format": "int32"
      },
      "AppUserStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10
        ],
        "type": "integer",
        "description": "0: Validated\r\n\r\n1: ValidatedFirstTime\r\n\r\n2: InvalidEmail\r\n\r\n3: InvalidPassword\r\n\r\n4: LockedOut\r\n\r\n5: Inactive\r\n\r\n6: Deleted\r\n\r\n7: NoRights\r\n\r\n8: CouldNotAuth\r\n\r\n9: Blocked\r\n\r\n10: ValidationRequired\r\n\r\n",
        "format": "int32"
      },
      "AuditLevel": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: Default\r\n\r\n1: None\r\n\r\n2: Detailed\r\n\r\n",
        "format": "int32"
      },
      "AuthorNormalizationModel": {
        "type": "object",
        "properties": {
          "pmid": {
            "type": "string",
            "nullable": true
          },
          "originalAuthor": {
            "type": "string",
            "nullable": true
          },
          "normalizedAuthor": {
            "type": "string",
            "nullable": true
          },
          "isNormalized": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AuthorNormalizationModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorNormalizationModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "AuthorNormalizationRequestModel": {
        "type": "object",
        "properties": {
          "pmid": {
            "type": "string",
            "nullable": true
          },
          "originalAuthor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchAuthorNormalizationRequest": {
        "type": "object",
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuthorNormalizationRequestModel"
            },
            "description": "A set of VLShared.WordPlugin.AuthorNormalizationRequestModel to normalize.",
            "nullable": true
          },
          "userIdentity": {
            "type": "string",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Authenticated request for batch author normalization."
      },
      "BatchTitleNormalizationRequest": {
        "type": "object",
        "properties": {
          "models": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TitleNormalizationRequestModel"
            },
            "description": "A set of VLShared.WordPlugin.TitleNormalizationRequestModel to normalize.",
            "nullable": true
          },
          "userIdentity": {
            "type": "string",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Authenticated request for batch titles normalization."
      },
      "BooleanSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "boolean",
            "description": "Request result"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ByteArraySuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Request result",
            "format": "byte",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CSLCitationsRequest": {
        "type": "object",
        "properties": {
          "citationIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Ids of citations which should be rendered.",
            "nullable": true
          },
          "styleId": {
            "type": "integer",
            "description": "CSL Style Id. CSL Style is specified by either StyleId, StyleTitle, StyleLink, or Style",
            "format": "int32",
            "nullable": true
          },
          "styleTitle": {
            "type": "string",
            "description": "CSL Style title. CSL Style is specified by either StyleId, StyleTitle, StyleLink, or Style",
            "nullable": true
          },
          "styleLink": {
            "type": "string",
            "description": "CSL Style link. CSL Style is specified by either StyleId, StyleTitle, StyleLink, or Style",
            "nullable": true
          },
          "style": {
            "type": "string",
            "description": "CSL Style in XML format. CSL Style is specified by either StyleId, StyleTitle, StyleLink, or Style",
            "nullable": true
          },
          "outputFormat": {
            "$ref": "#/components/schemas/CSLOutputFormat"
          },
          "contentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "RFE content Ids. Citations are specified by either ContentIds, Citations, or CSLCitations",
            "nullable": true
          },
          "citations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtFullCitationModel"
            },
            "description": "RFE citations. Citations are specified by either ContentIds, Citations, or CSLCitations",
            "nullable": true
          },
          "cslCitations": {
            "description": "Citations in CSL format. Citations are specified by either ContentIds, Citations, or CSLCitations",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CSLOutputFormat": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: HTML\r\n\r\n1: RTF\r\n\r\n2: Text\r\n\r\n",
        "format": "int32"
      },
      "CSLRequest": {
        "type": "object",
        "properties": {
          "styleId": {
            "type": "integer",
            "description": "CSL Style Id. CSL Style is specified by either StyleId, StyleTitle, StyleLink, or Style",
            "format": "int32",
            "nullable": true
          },
          "styleTitle": {
            "type": "string",
            "description": "CSL Style title. CSL Style is specified by either StyleId, StyleTitle, StyleLink, or Style",
            "nullable": true
          },
          "styleLink": {
            "type": "string",
            "description": "CSL Style link. CSL Style is specified by either StyleId, StyleTitle, StyleLink, or Style",
            "nullable": true
          },
          "style": {
            "type": "string",
            "description": "CSL Style in XML format. CSL Style is specified by either StyleId, StyleTitle, StyleLink, or Style",
            "nullable": true
          },
          "outputFormat": {
            "$ref": "#/components/schemas/CSLOutputFormat"
          },
          "contentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "RFE content Ids. Citations are specified by either ContentIds, Citations, or CSLCitations",
            "nullable": true
          },
          "citations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtFullCitationModel"
            },
            "description": "RFE citations. Citations are specified by either ContentIds, Citations, or CSLCitations",
            "nullable": true
          },
          "cslCitations": {
            "description": "Citations in CSL format. Citations are specified by either ContentIds, Citations, or CSLCitations",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CSLStyleModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Style Id",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "description": "Style title",
            "nullable": true
          },
          "link": {
            "type": "string",
            "description": "Style link",
            "nullable": true
          },
          "loadedDate": {
            "type": "string",
            "description": "Style update date",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "CSLStyleModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSLStyleModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CSLStylesRequest": {
        "type": "object",
        "properties": {
          "lastStyleUpdateDate": {
            "type": "string",
            "description": "Last time the styles were synchronized",
            "format": "date-time"
          },
          "styles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Word plugin styles",
            "nullable": true
          },
          "userIdentity": {
            "type": "string",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Citation": {
        "type": "object",
        "properties": {
          "restCandidates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CitationParseRecord"
            },
            "nullable": true
          },
          "ids": {
            "type": "object",
            "properties": {
              "issn": {
                "type": "string"
              },
              "eissn": {
                "type": "string"
              },
              "isbn": {
                "type": "string"
              },
              "nbn": {
                "type": "string"
              },
              "doi": {
                "type": "string"
              },
              "pmid": {
                "type": "string"
              },
              "bibcode": {
                "type": "string"
              },
              "oai": {
                "type": "string"
              },
              "coden": {
                "type": "string"
              },
              "sici": {
                "type": "string"
              },
              "bici": {
                "type": "string"
              },
              "lccn": {
                "type": "string"
              },
              "hdl": {
                "type": "string"
              },
              "oclcnum": {
                "type": "string"
              },
              "infotrieve": {
                "type": "string"
              },
              "urn": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "customer": {
                "type": "string"
              },
              "ddc": {
                "type": "string"
              },
              "udc": {
                "type": "string"
              },
              "patent": {
                "type": "string"
              },
              "pmcid": {
                "type": "string"
              },
              "pubdoi": {
                "type": "string"
              },
              "infotrievepart": {
                "type": "string"
              },
              "infotrievelibid": {
                "type": "string"
              },
              "callnumber": {
                "type": "string"
              },
              "abstractnumber": {
                "type": "string"
              },
              "ePaperNumber": {
                "type": "string"
              },
              "stdid": {
                "type": "string"
              },
              "estdid": {
                "type": "string"
              },
              "itpo": {
                "type": "string"
              },
              "itcon": {
                "type": "string"
              },
              "itbr": {
                "type": "string"
              },
              "itcc": {
                "type": "string"
              },
              "serissn": {
                "type": "string"
              },
              "sereissn": {
                "type": "string"
              },
              "eisbn": {
                "type": "string"
              },
              "succissn": {
                "type": "string"
              },
              "succissn2": {
                "type": "string"
              },
              "succissn3": {
                "type": "string"
              },
              "succissn4": {
                "type": "string"
              },
              "preissn": {
                "type": "string"
              },
              "preissn2": {
                "type": "string"
              },
              "preissn3": {
                "type": "string"
              },
              "preissn4": {
                "type": "string"
              },
              "stdnum": {
                "type": "string"
              },
              "estdnum": {
                "type": "string"
              },
              "unknown": {
                "type": "string"
              },
              "eunknown": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "titleContinuation": {
            "type": "string",
            "nullable": true
          },
          "altTitle": {
            "type": "string",
            "nullable": true
          },
          "titleWithContinuation": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "authors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "editors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "partOfTitle": {
            "type": "string",
            "nullable": true
          },
          "journalTitle": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "altPartOfTitle": {
            "type": "string",
            "nullable": true
          },
          "group1": {
            "type": "string",
            "nullable": true
          },
          "journalVolume": {
            "type": "string",
            "nullable": true
          },
          "bookEdition": {
            "type": "string",
            "nullable": true
          },
          "standardVersion": {
            "type": "string",
            "nullable": true
          },
          "group1Usage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "group2": {
            "type": "string",
            "nullable": true
          },
          "journalIssue": {
            "type": "string",
            "nullable": true
          },
          "standardRevision": {
            "type": "string",
            "nullable": true
          },
          "bookChapterNumber": {
            "type": "string",
            "nullable": true
          },
          "group2Usage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "conferenceDocumentType": {
            "$ref": "#/components/schemas/ConferenceDocumentType"
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "patentPublishedIn": {
            "type": "string",
            "nullable": true
          },
          "companyLocation": {
            "type": "string",
            "nullable": true
          },
          "place": {
            "type": "string",
            "nullable": true
          },
          "group3": {
            "type": "string",
            "nullable": true
          },
          "group3Usage": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "publicationDate": {
            "$ref": "#/components/schemas/DateCode"
          },
          "publicationYear": {
            "type": "integer",
            "format": "int32"
          },
          "publicationMonth": {
            "type": "integer",
            "format": "int32"
          },
          "publicationDay": {
            "type": "integer",
            "format": "int32"
          },
          "publicationEndDate": {
            "$ref": "#/components/schemas/DateCode"
          },
          "publicationDates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentPubDateKeyDateCodeKeyValuePair"
            },
            "nullable": true
          },
          "latestPublicationDate": {
            "$ref": "#/components/schemas/ContentPubDate"
          },
          "supplement": {
            "type": "string",
            "nullable": true
          },
          "conferencePlace": {
            "type": "string",
            "nullable": true
          },
          "reportProductType": {
            "type": "string",
            "nullable": true
          },
          "groupDateCode1": {
            "$ref": "#/components/schemas/DateCode"
          },
          "groupDateCode2": {
            "$ref": "#/components/schemas/DateCode"
          },
          "caption": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "conferenceStartDate": {
            "$ref": "#/components/schemas/DateCode"
          },
          "conferenceEndDate": {
            "$ref": "#/components/schemas/DateCode"
          },
          "pagesString": {
            "type": "string",
            "nullable": true
          },
          "publisher": {
            "type": "string",
            "nullable": true
          },
          "publishLocation": {
            "type": "string",
            "nullable": true
          },
          "genre": {
            "$ref": "#/components/schemas/Genres"
          },
          "relatedItemType": {
            "$ref": "#/components/schemas/RelatedItemType"
          },
          "rawData": {
            "type": "string",
            "nullable": true
          },
          "attributesAsString": {
            "type": "string",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": { },
            "nullable": true,
            "readOnly": true
          },
          "legacyPublicationTitle": {
            "type": "string",
            "nullable": true
          },
          "legacyArticleTitle": {
            "type": "string",
            "nullable": true
          },
          "pages": {
            "$ref": "#/components/schemas/Pages"
          },
          "holdingLocations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HoldingLocation"
            },
            "nullable": true,
            "readOnly": true
          },
          "isApparentJournalArticle": {
            "type": "boolean",
            "readOnly": true
          },
          "isApparentSupplement": {
            "type": "boolean",
            "readOnly": true
          },
          "contentId": {
            "type": "integer",
            "format": "int32"
          },
          "partOfContentId": {
            "type": "integer",
            "format": "int32"
          },
          "validatedPartOfContentId": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "firstNonITPublicationId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "firstNonITArticleId": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "stdNum": {
            "type": "string",
            "nullable": true
          },
          "stdNumDashed": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "eStdNum": {
            "type": "string",
            "nullable": true
          },
          "eStdNumDashed": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "stdNumStrict": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "stdNumAlternate": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "stdNumAlternateLoose": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "sectionStatement": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "idsAsString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "hasAuthor": {
            "type": "boolean",
            "readOnly": true
          },
          "authorsAsString": {
            "type": "string",
            "nullable": true
          },
          "hasEditor": {
            "type": "boolean",
            "readOnly": true
          },
          "editorsAsString": {
            "type": "string",
            "nullable": true
          },
          "genreAsString": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "genreAsText": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "relatedItemTypeAsText": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "articleOrSectionStmt": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "sectionStmt": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "summary": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "shortSummary": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isRawOnly": {
            "type": "boolean",
            "readOnly": true
          },
          "isEmpty": {
            "type": "boolean",
            "readOnly": true
          },
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "titleLabel": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "titleLabelSentenceCasedLabel": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "parentTitleSentenceCasedLabel": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "parentTitleLabel": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "authorsLabel": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "stdNumLabel": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "stdNumLabelSentenceCased": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "eStdNumLabel": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "eStdNumLabelSentenceCased": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "publisherLabel": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "supplementLabel": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "supplementLabelSentenceCased": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "unknownIdLabel": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "dataPoints": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isSerialGenre": {
            "type": "boolean",
            "readOnly": true
          },
          "isPubDateGenre": {
            "type": "boolean",
            "readOnly": true
          },
          "item": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "availability": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "price": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "matchingDocument": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "referencedContentId": {
            "type": "integer",
            "format": "int32"
          },
          "referencedJournalContentId": {
            "type": "integer",
            "format": "int32"
          },
          "referencedJournalVolume": {
            "type": "string",
            "nullable": true
          },
          "referencedJournalIssue": {
            "type": "string",
            "nullable": true
          },
          "contentTypeLabel": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CitationCustomStyleModel": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int32"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "stylesheet": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CitationCustomStyleModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CitationCustomStyleModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CitationParseRecord": {
        "type": "object",
        "properties": {
          "citation": {
            "$ref": "#/components/schemas/Citation"
          },
          "rank": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "_Citation": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "CiteItEventRequest": {
        "type": "object",
        "properties": {
          "eventType": {
            "$ref": "#/components/schemas/CiteItEventType"
          },
          "details": {
            "type": "string",
            "description": "Event related data.",
            "nullable": true
          },
          "userIdentity": {
            "type": "string",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CiteItEventType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "description": "0: Unknown\r\n\r\n1: BibliographyStyleApplied\r\n\r\n2: RfeCartPage\r\n\r\n3: RfeDocViewer\r\n\r\n4: Help\r\n\r\n5: GlobalStorageInsert\r\n\r\n6: GlobalStorageUpdate\r\n\r\n",
        "format": "int32"
      },
      "CiteItLog": {
        "type": "object",
        "properties": {
          "level": {
            "type": "string",
            "description": "Log level",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Log timestamp",
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Log message",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClientInfo": {
        "type": "object",
        "properties": {
          "authenticationMode": {
            "$ref": "#/components/schemas/RFEAuthenticationMode"
          },
          "costCenterText": {
            "type": "string",
            "nullable": true
          },
          "billRefText": {
            "type": "string",
            "nullable": true
          },
          "poText": {
            "type": "string",
            "nullable": true
          },
          "custOrderText": {
            "type": "string",
            "nullable": true
          },
          "costCenterDefault": {
            "type": "string",
            "nullable": true
          },
          "billRefDefault": {
            "type": "string",
            "nullable": true
          },
          "poDefault": {
            "type": "string",
            "nullable": true
          },
          "custOrderDefault": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ClientInfoSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ClientInfo"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Clip": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "nullable": true
          },
          "highlights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentSearchHighlightModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionFilter": {
        "type": "object",
        "properties": {
          "filter": {
            "$ref": "#/components/schemas/CollectionFilterType"
          },
          "collectionIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CollectionFilterType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: ClientOnly\r\n\r\n2: Id\r\n\r\n3: BrowseAllHoldings\r\n\r\n",
        "format": "int32"
      },
      "ConferenceDocumentType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "0: Paper\r\n\r\n1: Abstract\r\n\r\n2: Poster\r\n\r\n3: Oral\r\n\r\n",
        "format": "int32"
      },
      "ContactModel": {
        "type": "object",
        "properties": {
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "addr1": {
            "type": "string",
            "nullable": true
          },
          "addr2": {
            "type": "string",
            "nullable": true
          },
          "addr3": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "altPhone": {
            "type": "string",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentDescriptorList": {
        "type": "object",
        "properties": {
          "title": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "abstract": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "fullText": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentDescriptorsModel": {
        "type": "object",
        "properties": {
          "contentDescriptors": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ContentDescriptorList"
            },
            "nullable": true
          },
          "descriptors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateDescriptor"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentDescriptorsModelSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ContentDescriptorsModel"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ContentDescriptorsRequest": {
        "required": [
          "ids"
        ],
        "type": "object",
        "properties": {
          "ids": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "additionalProperties": false
      },
      "ContentFulltextMatchType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: FreeText\r\n\r\n1: Descriptor\r\n\r\n",
        "format": "int32"
      },
      "ContentPubDate": {
        "type": "object",
        "properties": {
          "dateType": {
            "$ref": "#/components/schemas/ContentPubDateType"
          },
          "mediaType": {
            "$ref": "#/components/schemas/ContentPubDateMediaType"
          },
          "date": {
            "$ref": "#/components/schemas/DateCode"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "updatedTime": {
            "type": "string",
            "format": "date-time"
          },
          "oldWayDate": {
            "$ref": "#/components/schemas/DateCode"
          },
          "isUnknown": {
            "type": "boolean",
            "readOnly": true
          },
          "isMediaUnknown": {
            "type": "boolean",
            "readOnly": true
          },
          "isNotSet": {
            "type": "boolean",
            "readOnly": true
          },
          "isAheadOfPrint": {
            "type": "boolean",
            "readOnly": true
          },
          "isPresent": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ContentPubDateKey": {
        "type": "object",
        "properties": {
          "dateType": {
            "$ref": "#/components/schemas/ContentPubDateType"
          },
          "mediaType": {
            "$ref": "#/components/schemas/ContentPubDateMediaType"
          }
        },
        "additionalProperties": false
      },
      "ContentPubDateKeyDateCodeKeyValuePair": {
        "type": "object",
        "properties": {
          "key": {
            "$ref": "#/components/schemas/ContentPubDateKey"
          },
          "value": {
            "$ref": "#/components/schemas/DateCode"
          }
        },
        "additionalProperties": false
      },
      "ContentPubDateMediaType": {
        "enum": [
          0,
          1,
          -1
        ],
        "type": "integer",
        "description": "0: Print\r\n\r\n1: Electronic\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "ContentPubDateType": {
        "enum": [
          0,
          1,
          2,
          3,
          -1
        ],
        "type": "integer",
        "description": "0: End\r\n\r\n1: PrePrint\r\n\r\n2: AheadOfPrint\r\n\r\n3: Print\r\n\r\n3: Start\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "ContentSearchAggregationResult": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "key": {
            "type": "string",
            "nullable": true
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "subResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentSearchAggregationResult"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentSearchHighlightModel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ContentSearchHighlightType"
          },
          "start": {
            "type": "integer",
            "format": "int32"
          },
          "length": {
            "type": "integer",
            "format": "int32"
          },
          "descriptorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "vocabularyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ContentSearchHighlightType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: FreeText\r\n\r\n1: Descriptor\r\n\r\n",
        "format": "int32"
      },
      "ContentSearchMethod": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          262144,
          524288,
          1048576,
          2097152,
          67108864,
          134217728,
          268435456,
          536870912,
          536870913,
          805306368,
          1073741824,
          1342177280,
          1610612736
        ],
        "type": "integer",
        "description": "0: Unknown\r\n\r\n1: InfoId\r\n\r\n2: StdNum\r\n\r\n4: DOI\r\n\r\n8: Title\r\n\r\n16: TitleExact\r\n\r\n32: KeywordAny\r\n\r\n64: KeywordAll\r\n\r\n128: KeywordAdv\r\n\r\n256: TOC\r\n\r\n512: Author\r\n\r\n1024: AlternateId\r\n\r\n2048: Basic\r\n\r\n4096: TitleAndKeywords\r\n\r\n8192: Advanced\r\n\r\n16384: MultiSearch\r\n\r\n262144: BrowseAll\r\n\r\n524288: BrowsePopular\r\n\r\n1048576: BrowseInterest\r\n\r\n2097152: BrowseNew\r\n\r\n67108864: Citation\r\n\r\n134217728: Z3950\r\n\r\n268435456: Boolean\r\n\r\n536870912: Semantic\r\n\r\n536870913: AggregateVocabDesc\r\n\r\n805306368: AdvancedBoolean\r\n\r\n1073741824: AdvancedSemantic\r\n\r\n1342177280: Lucene\r\n\r\n1610612736: Library\r\n\r\n",
        "format": "int32"
      },
      "ContentSearchSortDir": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: Default\r\n\r\n1: Ascending\r\n\r\n2: Descending\r\n\r\n",
        "format": "int32"
      },
      "ContentSearchSortOrder": {
        "enum": [
          0,
          1,
          2,
          99
        ],
        "type": "integer",
        "description": "0: Relevance\r\n\r\n1: PubYear\r\n\r\n2: Title\r\n\r\n99: Score\r\n\r\n",
        "format": "int32"
      },
      "ContextOrderResult": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14
        ],
        "type": "integer",
        "description": "0: SuccessFromOrder\r\n\r\n1: SuccessFromArtPub\r\n\r\n2: SuccessFromOpenURL\r\n\r\n3: SuccessFromURL\r\n\r\n4: SuccessFromCurrent\r\n\r\n5: SuccessFromCartItem\r\n\r\n6: SuccessFromQLU\r\n\r\n7: MultiCitation\r\n\r\n8: InvalidOrderId\r\n\r\n9: SecurityViolation\r\n\r\n10: ContentNotFound\r\n\r\n11: NoCitation\r\n\r\n12: InvalidItemId\r\n\r\n13: QLUNoMatch\r\n\r\n14: GeneralError\r\n\r\n",
        "format": "int32"
      },
      "Copyright2": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Copyright2"
        }
      },
      "CopyrightStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          10
        ],
        "type": "integer",
        "description": "0: Unknown\r\n\r\n1: Unavailable\r\n\r\n2: Denied\r\n\r\n3: Granted\r\n\r\n4: PublicDomain\r\n\r\n5: GrantPending\r\n\r\n6: OpenAccess\r\n\r\n10: NotNeeded\r\n\r\n",
        "format": "int32"
      },
      "CreateItemFromBodyParams": {
        "type": "object",
        "properties": {
          "abstractNumber": {
            "type": "string",
            "nullable": true
          },
          "accessed": {
            "type": "string",
            "nullable": true
          },
          "acronym": {
            "type": "string",
            "nullable": true
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "callNumber": {
            "type": "string",
            "nullable": true
          },
          "chapterNumber": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "coden": {
            "type": "string",
            "nullable": true
          },
          "collectionEditors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "collectionTitle": {
            "type": "string",
            "nullable": true
          },
          "conferenceName": {
            "type": "string",
            "nullable": true
          },
          "conferencePlace": {
            "type": "string",
            "nullable": true
          },
          "containerTitle": {
            "type": "string",
            "nullable": true
          },
          "contentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "libraryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "libraryDocId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "countryRegion": {
            "type": "string",
            "nullable": true
          },
          "doi": {
            "type": "string",
            "nullable": true
          },
          "edition": {
            "type": "string",
            "nullable": true
          },
          "editors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "eisbn": {
            "type": "string",
            "nullable": true
          },
          "eissn": {
            "type": "string",
            "nullable": true
          },
          "eStandardNumber": {
            "type": "string",
            "nullable": true
          },
          "eventDate": {
            "type": "string",
            "nullable": true
          },
          "genre": {
            "type": "string",
            "nullable": true
          },
          "group1": {
            "type": "string",
            "nullable": true
          },
          "group2": {
            "type": "string",
            "nullable": true
          },
          "isbn": {
            "type": "string",
            "nullable": true
          },
          "issn": {
            "type": "string",
            "nullable": true
          },
          "issue": {
            "type": "string",
            "nullable": true
          },
          "journalAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "jurisdiction": {
            "type": "string",
            "nullable": true
          },
          "lccn": {
            "type": "string",
            "nullable": true
          },
          "oclc": {
            "type": "string",
            "nullable": true
          },
          "pages": {
            "type": "string",
            "nullable": true
          },
          "pagesCount": {
            "type": "string",
            "nullable": true
          },
          "patentNumber": {
            "type": "string",
            "nullable": true
          },
          "pmcid": {
            "type": "string",
            "nullable": true
          },
          "pmid": {
            "type": "string",
            "nullable": true
          },
          "publicationDate": {
            "type": "string",
            "nullable": true
          },
          "publisher": {
            "type": "string",
            "nullable": true
          },
          "publisherPlace": {
            "type": "string",
            "nullable": true
          },
          "referenceOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sectionStatement": {
            "type": "string",
            "nullable": true
          },
          "sici": {
            "type": "string",
            "nullable": true
          },
          "sourceType": {
            "type": "string",
            "nullable": true
          },
          "standardNumber": {
            "type": "string",
            "nullable": true
          },
          "standardVersion": {
            "type": "string",
            "nullable": true
          },
          "startPage": {
            "type": "string",
            "nullable": true
          },
          "supplementOrChapter": {
            "type": "string",
            "nullable": true
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "calculatedTag": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "urlAN": {
            "type": "string",
            "nullable": true
          },
          "volume": {
            "type": "string",
            "nullable": true
          },
          "databaseName": {
            "type": "string",
            "nullable": true
          },
          "dbOnlineFromDate": {
            "type": "string",
            "nullable": true
          },
          "citedDate": {
            "type": "string",
            "nullable": true
          },
          "publicationName": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "medium": {
            "type": "string",
            "nullable": true
          },
          "collectionNumber": {
            "type": "string",
            "nullable": true
          },
          "authority": {
            "type": "string",
            "nullable": true
          },
          "submitted": {
            "type": "string",
            "nullable": true
          },
          "event": {
            "type": "string",
            "nullable": true
          },
          "customField1": {
            "type": "string",
            "nullable": true
          },
          "customField2": {
            "type": "string",
            "nullable": true
          },
          "customField3": {
            "type": "string",
            "nullable": true
          },
          "customField4": {
            "type": "string",
            "nullable": true
          },
          "customField5": {
            "type": "string",
            "nullable": true
          },
          "customField6": {
            "type": "string",
            "nullable": true
          },
          "customField7": {
            "type": "string",
            "nullable": true
          },
          "customField8": {
            "type": "string",
            "nullable": true
          },
          "customField9": {
            "type": "string",
            "nullable": true
          },
          "customField10": {
            "type": "string",
            "nullable": true
          },
          "customDate1": {
            "type": "string",
            "nullable": true
          },
          "customDate2": {
            "type": "string",
            "nullable": true
          },
          "customDate3": {
            "type": "string",
            "nullable": true
          },
          "customDate4": {
            "type": "string",
            "nullable": true
          },
          "customDate5": {
            "type": "string",
            "nullable": true
          },
          "customDate6": {
            "type": "string",
            "nullable": true
          },
          "customDate7": {
            "type": "string",
            "nullable": true
          },
          "customInt1": {
            "type": "string",
            "nullable": true
          },
          "customInt2": {
            "type": "string",
            "nullable": true
          },
          "customInt3": {
            "type": "string",
            "nullable": true
          },
          "customInt4": {
            "type": "string",
            "nullable": true
          },
          "customInt5": {
            "type": "string",
            "nullable": true
          },
          "reservedField1": {
            "type": "string",
            "nullable": true
          },
          "reservedField2": {
            "type": "string",
            "nullable": true
          },
          "reservedField3": {
            "type": "string",
            "nullable": true
          },
          "reservedField4": {
            "type": "string",
            "nullable": true
          },
          "reservedField5": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SourceMetadata"
          },
          "translators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "composers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "shortTitle": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "numberOfVolumes": {
            "type": "string",
            "nullable": true
          },
          "section": {
            "type": "string",
            "nullable": true
          },
          "archive": {
            "type": "string",
            "nullable": true
          },
          "archiveLocation": {
            "type": "string",
            "nullable": true
          },
          "databaseProvider": {
            "type": "string",
            "nullable": true
          },
          "dimensions": {
            "type": "string",
            "nullable": true
          },
          "references": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "scale": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DateCode": {
        "type": "object",
        "properties": {
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "format": "int32"
          },
          "day": {
            "type": "integer",
            "format": "int32"
          },
          "form": {
            "$ref": "#/components/schemas/DateCodeForm"
          },
          "precision": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DateCodeForm": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: Year\r\n\r\n2: MonthYear\r\n\r\n3: DayMonthYear\r\n\r\n",
        "format": "int32"
      },
      "DbSortDirection": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: Asc\r\n\r\n1: Desc\r\n\r\n",
        "format": "int32"
      },
      "DeliveryInfoModel": {
        "type": "object",
        "properties": {
          "orderStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderStatusEntry"
            },
            "nullable": true
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "content": {
            "type": "string",
            "format": "byte",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeliveryInfoModelSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/DeliveryInfoModel"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DeliveryMethod": {
        "enum": [
          0,
          2,
          98,
          99,
          100,
          101,
          102,
          200,
          201,
          202,
          203,
          204,
          205,
          300,
          301,
          -1
        ],
        "type": "integer",
        "description": "0: Mail\r\n\r\n2: Fax\r\n\r\n98: DirectView\r\n\r\n99: NoDelivery\r\n\r\n100: Email\r\n\r\n100: EmailLinkNative\r\n\r\n101: EmailLinkPdf\r\n\r\n102: EmailLinkTif\r\n\r\n200: FTP\r\n\r\n200: FTPNative\r\n\r\n201: FTPPdf\r\n\r\n202: FTPTif\r\n\r\n203: SFTP\r\n\r\n203: SFTPNative\r\n\r\n204: SFTPPdf\r\n\r\n205: SFTPTif\r\n\r\n300: ArielEmail\r\n\r\n301: ArielIP\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "DeliveryUrgency": {
        "enum": [
          0,
          1,
          2,
          3,
          -1
        ],
        "type": "integer",
        "description": "0: Normal\r\n\r\n1: Rush\r\n\r\n2: Panic\r\n\r\n3: RushPanic\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "DepartmentModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "integer",
            "format": "int32"
          },
          "divisionId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "defaultLocationId": {
            "type": "integer",
            "format": "int32"
          },
          "contactUser": {
            "$ref": "#/components/schemas/ContactModel"
          },
          "billingContact": {
            "$ref": "#/components/schemas/ContactModel"
          },
          "trackingFieldsDefaults": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "trackingFieldsValues": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepartmentModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepartmentModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DepartmentModelSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/DepartmentModel"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DescriptorCount": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/ContentFulltextMatchType"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "descriptorId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "vocabularyId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DivisionModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "defaultLocationId": {
            "type": "integer",
            "format": "int32"
          },
          "defaultDepartmentId": {
            "type": "integer",
            "format": "int32"
          },
          "contactUser": {
            "$ref": "#/components/schemas/ContactModel"
          },
          "billingContact": {
            "$ref": "#/components/schemas/ContactModel"
          },
          "trackingFieldsDefaults": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "trackingFieldsValues": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DivisionModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DivisionModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DivisionModelSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/DivisionModel"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DocumentLibrariesModel": {
        "type": "object",
        "properties": {
          "contentId": {
            "type": "integer",
            "format": "int32"
          },
          "doi": {
            "type": "string",
            "nullable": true
          },
          "patentNumber": {
            "type": "string",
            "nullable": true
          },
          "libraries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryDocumentModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DocumentLibrariesModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentLibrariesModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "DuplicateHandling": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: ByContentId\r\n\r\n",
        "format": "int32"
      },
      "EPrintAttachmentHandling": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: DoNotInclude\r\n\r\n1: IncludeAll\r\n\r\n2: IncludeSelected\r\n\r\n",
        "format": "int32"
      },
      "EPrintDeliveryMethod": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: ExternalLink\r\n\r\n1: ManagedLink\r\n\r\n2: LocalFile\r\n\r\n",
        "format": "int32"
      },
      "EPrintInfo": {
        "type": "object",
        "properties": {
          "owner": {
            "$ref": "#/components/schemas/Holding"
          },
          "originalCopies": {
            "type": "integer",
            "format": "int32"
          },
          "copiesRemaining": {
            "type": "integer",
            "format": "int32"
          },
          "expiration": {
            "$ref": "#/components/schemas/DateCode"
          },
          "format": {
            "type": "string",
            "nullable": true
          },
          "attachmentHandling": {
            "$ref": "#/components/schemas/EPrintAttachmentHandling"
          },
          "deliveryMethod": {
            "$ref": "#/components/schemas/EPrintDeliveryMethod"
          },
          "previewType": {
            "$ref": "#/components/schemas/EPrintPreviewType"
          },
          "allowedAccessesPerRecipient": {
            "type": "integer",
            "format": "int32"
          },
          "allowedAccessesPerForward": {
            "type": "integer",
            "format": "int32"
          },
          "allowedAccessesTotalPerRecipientAndForwards": {
            "type": "integer",
            "format": "int32"
          },
          "allowExternalRecipients": {
            "type": "boolean",
            "readOnly": true
          },
          "attachmentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "copyrights": {
            "$ref": "#/components/schemas/Copyright2"
          },
          "expirationAsDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "copyrightIds": {
            "type": "string",
            "nullable": true
          },
          "externalCopyrightIds": {
            "type": "string",
            "nullable": true
          },
          "holdingId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "EPrintPreviewType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: QuarterPage\r\n\r\n2: HalfPage\r\n\r\n3: OnePage\r\n\r\n4: AllPages\r\n\r\n5: Abstract\r\n\r\n",
        "format": "int32"
      },
      "ExtFullCitation": {
        "type": "object",
        "properties": {
          "citation": {
            "$ref": "#/components/schemas/Citation"
          },
          "genre": {
            "$ref": "#/components/schemas/ExtGenres"
          },
          "ids": {
            "type": "object",
            "properties": {
              "issn": {
                "type": "string"
              },
              "eissn": {
                "type": "string"
              },
              "isbn": {
                "type": "string"
              },
              "nbn": {
                "type": "string"
              },
              "doi": {
                "type": "string"
              },
              "pmid": {
                "type": "string"
              },
              "bibcode": {
                "type": "string"
              },
              "oai": {
                "type": "string"
              },
              "coden": {
                "type": "string"
              },
              "sici": {
                "type": "string"
              },
              "bici": {
                "type": "string"
              },
              "lccn": {
                "type": "string"
              },
              "hdl": {
                "type": "string"
              },
              "oclcnum": {
                "type": "string"
              },
              "infotrieve": {
                "type": "string"
              },
              "urn": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "customer": {
                "type": "string"
              },
              "ddc": {
                "type": "string"
              },
              "udc": {
                "type": "string"
              },
              "patent": {
                "type": "string"
              },
              "pmcid": {
                "type": "string"
              },
              "pubdoi": {
                "type": "string"
              },
              "infotrievepart": {
                "type": "string"
              },
              "infotrievelibid": {
                "type": "string"
              },
              "callnumber": {
                "type": "string"
              },
              "abstractnumber": {
                "type": "string"
              },
              "ePaperNumber": {
                "type": "string"
              },
              "stdid": {
                "type": "string"
              },
              "estdid": {
                "type": "string"
              },
              "itpo": {
                "type": "string"
              },
              "itcon": {
                "type": "string"
              },
              "itbr": {
                "type": "string"
              },
              "itcc": {
                "type": "string"
              },
              "serissn": {
                "type": "string"
              },
              "sereissn": {
                "type": "string"
              },
              "eisbn": {
                "type": "string"
              },
              "succissn": {
                "type": "string"
              },
              "succissn2": {
                "type": "string"
              },
              "succissn3": {
                "type": "string"
              },
              "succissn4": {
                "type": "string"
              },
              "preissn": {
                "type": "string"
              },
              "preissn2": {
                "type": "string"
              },
              "preissn3": {
                "type": "string"
              },
              "preissn4": {
                "type": "string"
              },
              "stdnum": {
                "type": "string"
              },
              "estdnum": {
                "type": "string"
              },
              "unknown": {
                "type": "string"
              },
              "eunknown": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "titleContinuation": {
            "type": "string",
            "nullable": true
          },
          "altTitle": {
            "type": "string",
            "nullable": true
          },
          "authors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "editors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "publication": {
            "type": "string",
            "nullable": true
          },
          "partOfTitle": {
            "type": "string",
            "nullable": true
          },
          "altPublication": {
            "type": "string",
            "nullable": true
          },
          "altPartOfTitle": {
            "type": "string",
            "nullable": true
          },
          "publicationVolume": {
            "type": "string",
            "nullable": true
          },
          "publicationIssue": {
            "type": "string",
            "nullable": true
          },
          "publicationDate": {
            "type": "string",
            "nullable": true
          },
          "publicationEndDate": {
            "type": "string",
            "nullable": true
          },
          "supplement": {
            "type": "string",
            "nullable": true
          },
          "publicationPages": {
            "type": "string",
            "nullable": true
          },
          "publisher": {
            "type": "string",
            "nullable": true
          },
          "publishLocation": {
            "type": "string",
            "nullable": true
          },
          "rawData": {
            "type": "string",
            "nullable": true
          },
          "attributesAsString": {
            "type": "string",
            "nullable": true
          },
          "stdNum": {
            "type": "string",
            "nullable": true
          },
          "eStdNum": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExtFullCitationModel": {
        "type": "object",
        "properties": {
          "genre": {
            "$ref": "#/components/schemas/Genres"
          },
          "entityIds": {
            "type": "object",
            "properties": {
              "issn": {
                "type": "string"
              },
              "eissn": {
                "type": "string"
              },
              "isbn": {
                "type": "string"
              },
              "nbn": {
                "type": "string"
              },
              "doi": {
                "type": "string"
              },
              "pmid": {
                "type": "string"
              },
              "bibcode": {
                "type": "string"
              },
              "oai": {
                "type": "string"
              },
              "coden": {
                "type": "string"
              },
              "sici": {
                "type": "string"
              },
              "bici": {
                "type": "string"
              },
              "lccn": {
                "type": "string"
              },
              "hdl": {
                "type": "string"
              },
              "oclcnum": {
                "type": "string"
              },
              "infotrieve": {
                "type": "string"
              },
              "urn": {
                "type": "string"
              },
              "url": {
                "type": "string"
              },
              "customer": {
                "type": "string"
              },
              "ddc": {
                "type": "string"
              },
              "udc": {
                "type": "string"
              },
              "patent": {
                "type": "string"
              },
              "pmcid": {
                "type": "string"
              },
              "pubdoi": {
                "type": "string"
              },
              "infotrievepart": {
                "type": "string"
              },
              "infotrievelibid": {
                "type": "string"
              },
              "callnumber": {
                "type": "string"
              },
              "abstractnumber": {
                "type": "string"
              },
              "ePaperNumber": {
                "type": "string"
              },
              "stdid": {
                "type": "string"
              },
              "estdid": {
                "type": "string"
              },
              "itpo": {
                "type": "string"
              },
              "itcon": {
                "type": "string"
              },
              "itbr": {
                "type": "string"
              },
              "itcc": {
                "type": "string"
              },
              "serissn": {
                "type": "string"
              },
              "sereissn": {
                "type": "string"
              },
              "eisbn": {
                "type": "string"
              },
              "succissn": {
                "type": "string"
              },
              "succissn2": {
                "type": "string"
              },
              "succissn3": {
                "type": "string"
              },
              "succissn4": {
                "type": "string"
              },
              "preissn": {
                "type": "string"
              },
              "preissn2": {
                "type": "string"
              },
              "preissn3": {
                "type": "string"
              },
              "preissn4": {
                "type": "string"
              },
              "stdnum": {
                "type": "string"
              },
              "estdnum": {
                "type": "string"
              },
              "unknown": {
                "type": "string"
              },
              "eunknown": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "description": "Collection of the document identifiers",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "The document title",
            "nullable": true
          },
          "titleContinuation": {
            "type": "string",
            "description": "Continuation of the document title",
            "nullable": true
          },
          "titleAlt": {
            "type": "string",
            "description": "Title Alt",
            "nullable": true
          },
          "authors": {
            "type": "array",
            "items": { },
            "description": "Authors of the document",
            "nullable": true
          },
          "editors": {
            "type": "array",
            "items": { },
            "description": "Editors of the document",
            "nullable": true
          },
          "publication": {
            "type": "string",
            "description": "Publication",
            "nullable": true
          },
          "partOfTitle": {
            "type": "string",
            "description": "Part of the title",
            "nullable": true
          },
          "altPublication": {
            "type": "string",
            "description": "Alternative publication",
            "nullable": true
          },
          "altPartOfTitle": {
            "type": "string",
            "description": "Alternative part of the title",
            "nullable": true
          },
          "publicationVolume": {
            "type": "string",
            "description": "Volume of the document publication",
            "nullable": true
          },
          "publicationIssue": {
            "type": "string",
            "description": "Publication issue of the document",
            "nullable": true
          },
          "publicationDate": {
            "type": "string",
            "description": "Publication date of the document",
            "nullable": true
          },
          "publicationEndDate": {
            "type": "string",
            "description": "Publication end date of the document",
            "nullable": true
          },
          "supplement": {
            "type": "string",
            "description": "Document supplement",
            "nullable": true
          },
          "publicationPages": {
            "type": "string",
            "description": "Publication pages",
            "nullable": true
          },
          "publisher": {
            "type": "string",
            "description": "The document publisher",
            "nullable": true
          },
          "publisherLocation": {
            "type": "string",
            "description": "Location of the document publisher",
            "nullable": true
          },
          "rawData": {
            "type": "string",
            "description": "Document raw data",
            "nullable": true
          },
          "attributes": {
            "type": "string",
            "description": "Attributes of the document",
            "nullable": true
          },
          "stdNum": {
            "type": "string",
            "description": "STD number",
            "nullable": true
          },
          "eStdNum": {
            "type": "string",
            "description": "ESTD number",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExtGenres": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          1000
        ],
        "type": "integer",
        "description": "0: article\r\n\r\n1: journal\r\n\r\n2: book\r\n\r\n3: proceeding\r\n\r\n4: patent\r\n\r\n5: standard\r\n\r\n6: report\r\n\r\n7: thesis\r\n\r\n8: document\r\n\r\n9: bookchapter\r\n\r\n10: conference\r\n\r\n11: conferencepaper\r\n\r\n12: clinicaltrial\r\n\r\n13: newspaperarticle\r\n\r\n14: onlineresource\r\n\r\n1000: unknown\r\n\r\n",
        "format": "int32"
      },
      "ExtOrderSource": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ExtOrderSourceIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtOrderSource"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ExtResourceHostPattern": {
        "type": "object",
        "properties": {
          "pattern": {
            "type": "string",
            "nullable": true
          },
          "exclude": {
            "type": "boolean"
          },
          "port": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "schema": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/ExtResourceHostPatternType"
          }
        },
        "additionalProperties": false
      },
      "ExtResourceHostPatternType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: Url\r\n\r\n1: Host\r\n\r\n2: Domain\r\n\r\n",
        "format": "int32"
      },
      "Genre": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GenreIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Genre"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GenreSubType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "0: Default\r\n\r\n0: conferencepaper_paper\r\n\r\n1: conferencepaper_abstract\r\n\r\n2: conferencepaper_poster\r\n\r\n3: conferencepaper_oral\r\n\r\n",
        "format": "int32"
      },
      "Genres": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          32,
          33,
          34,
          -1
        ],
        "type": "integer",
        "description": "0: unknown\r\n\r\n1: journal\r\n\r\n2: book\r\n\r\n3: patent\r\n\r\n4: proceeding\r\n\r\n5: bookitem\r\n\r\n6: issue\r\n\r\n7: article\r\n\r\n8: conference\r\n\r\n9: report\r\n\r\n10: preprint\r\n\r\n11: document\r\n\r\n12: standard\r\n\r\n13: newspaper\r\n\r\n14: lawreport\r\n\r\n15: labjournal\r\n\r\n16: thesis\r\n\r\n17: bookchapter\r\n\r\n18: bookseries\r\n\r\n19: conferencepaper\r\n\r\n20: movie\r\n\r\n21: video\r\n\r\n22: audio\r\n\r\n23: database\r\n\r\n24: image\r\n\r\n25: unknownleaf\r\n\r\n26: clinicaltrial\r\n\r\n27: newspaperarticle\r\n\r\n28: onlineresource\r\n\r\n29: packageinsert\r\n\r\n30: summaryproduct\r\n\r\n31: safetydatasheet\r\n\r\n32: dataonfile\r\n\r\n33: compendia\r\n\r\n34: relateditem\r\n\r\n-1: none\r\n\r\n",
        "format": "int32"
      },
      "GetDocumentInfoRequest": {
        "required": [
          "filters"
        ],
        "type": "object",
        "properties": {
          "filters": {
            "$ref": "#/components/schemas/LibraryDocumentFiltersModel"
          },
          "sort": {
            "$ref": "#/components/schemas/LibraryDocumentSort"
          },
          "sortDirection": {
            "$ref": "#/components/schemas/DbSortDirection"
          },
          "pageNumber": {
            "maximum": 2147483647,
            "minimum": 1,
            "type": "integer",
            "description": "Page number (1-based). Default value is 1.",
            "format": "int32",
            "nullable": true
          },
          "pageSize": {
            "maximum": 200,
            "minimum": 1,
            "type": "integer",
            "description": "Page size. Default value is 20.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlobalStorageItemInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "source": {
            "$ref": "#/components/schemas/Source"
          },
          "canUpdate": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GlobalStorageItemInfoArraySuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlobalStorageItemInfo"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GlobalStorageItemInfoSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/GlobalStorageItemInfo"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "GrantType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: password\r\n\r\n1: refresh_token\r\n\r\n",
        "format": "int32"
      },
      "GroupUserInfo": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Holding": {
        "type": "object",
        "properties": {
          "collectionId": {
            "type": "integer",
            "format": "int32"
          },
          "contentId": {
            "type": "integer",
            "format": "int32"
          },
          "locationPaper": {
            "type": "string",
            "nullable": true
          },
          "callNumberPaper": {
            "type": "string",
            "nullable": true
          },
          "locationElec": {
            "type": "string",
            "nullable": true
          },
          "callNumberElec": {
            "type": "string",
            "nullable": true
          },
          "media": {
            "$ref": "#/components/schemas/Media"
          },
          "copyright": {
            "$ref": "#/components/schemas/Copyright2"
          },
          "feeCRFlat": {
            "type": "number",
            "format": "double"
          },
          "feeCRPercent": {
            "type": "number",
            "format": "double"
          },
          "feeCRPerPage": {
            "type": "number",
            "format": "double"
          },
          "feeCRType": {
            "$ref": "#/components/schemas/ProcFeeType"
          },
          "terms": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "heldDate": {
            "$ref": "#/components/schemas/ContentPubDate"
          },
          "heldDateType": {
            "$ref": "#/components/schemas/ContentPubDateType"
          },
          "heldDateMediaType": {
            "$ref": "#/components/schemas/ContentPubDateMediaType"
          },
          "heldStart": {
            "$ref": "#/components/schemas/DateCode"
          },
          "heldEnd": {
            "$ref": "#/components/schemas/DateCode"
          },
          "imageFile": {
            "type": "string",
            "nullable": true
          },
          "imageType": {
            "$ref": "#/components/schemas/ImageType"
          },
          "imageExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "imageKey": {
            "type": "string",
            "nullable": true
          },
          "imageCopies": {
            "type": "integer",
            "format": "int32"
          },
          "embargoDaysOrMonths": {
            "type": "integer",
            "format": "int32"
          },
          "class": {
            "type": "string",
            "nullable": true
          },
          "csPublicationId": {
            "type": "string",
            "nullable": true
          },
          "csArticleId": {
            "type": "string",
            "nullable": true
          },
          "csVolumeId": {
            "type": "string",
            "nullable": true
          },
          "csIssueId": {
            "type": "string",
            "nullable": true
          },
          "csData": {
            "type": "string",
            "nullable": true
          },
          "rawVolume": {
            "type": "string",
            "nullable": true
          },
          "rawIssue": {
            "type": "string",
            "nullable": true
          },
          "flags": {
            "$ref": "#/components/schemas/HoldingFlags"
          },
          "maximumAgeDaysOrMonths": {
            "type": "integer",
            "format": "int32"
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "subCategory": {
            "type": "string",
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "imageLastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "partOfContentId": {
            "type": "integer",
            "format": "int32"
          },
          "clientId": {
            "type": "integer",
            "format": "int32"
          },
          "titlePrefix": {
            "type": "string",
            "nullable": true
          },
          "pubNamePrefix": {
            "type": "string",
            "nullable": true
          },
          "genre": {
            "$ref": "#/components/schemas/Genres"
          },
          "collectionName": {
            "type": "string",
            "nullable": true
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "openAccessLicenseType": {
            "$ref": "#/components/schemas/OpenAccessLicenseType"
          },
          "hasImage": {
            "type": "boolean",
            "readOnly": true
          },
          "isEprint": {
            "type": "boolean",
            "readOnly": true
          },
          "isAuthoritative": {
            "type": "boolean"
          },
          "isInactiveContent": {
            "type": "boolean"
          },
          "smCallNumber": {
            "type": "string",
            "nullable": true
          },
          "modifiedByType": {
            "$ref": "#/components/schemas/ModifiedByTypes"
          },
          "modifiedById": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "modifiedBy": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "auditSource": {
            "type": "string",
            "nullable": true
          },
          "currentAuditLevel": {
            "$ref": "#/components/schemas/AuditLevel"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "inDb": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "HoldingFlags": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: Eprint\r\n\r\n2: AutoRepositoryContent\r\n\r\n4: CRVerificationRequired\r\n\r\n8: Authoritative\r\n\r\n16: AutoAdd\r\n\r\n32: InactiveContent\r\n\r\n64: HasMoreInfo\r\n\r\n",
        "format": "int32"
      },
      "HoldingInfoClass": {
        "type": "object",
        "properties": {
          "partOfContentId": {
            "type": "integer",
            "format": "int32"
          },
          "heldStart": {
            "$ref": "#/components/schemas/DateCode"
          },
          "heldEnd": {
            "$ref": "#/components/schemas/DateCode"
          },
          "collectionId": {
            "type": "integer",
            "format": "int32"
          },
          "collectionName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "HoldingLocation": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string",
            "nullable": true
          },
          "subLocation": {
            "type": "string",
            "nullable": true
          },
          "callNumber": {
            "type": "string",
            "nullable": true
          },
          "shelfTitle": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IdNameModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageType": {
        "enum": [
          0,
          10,
          11,
          12,
          13,
          15,
          50,
          -1
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n10: ScanQ1\r\n\r\n11: ScanQ2\r\n\r\n12: ScanQ3\r\n\r\n13: ScanQ4\r\n\r\n15: ScanQ5\r\n\r\n50: PubOrig\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "Int32LibraryFieldSetIDictionarySuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/LibraryFieldSet"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Int32StringDictionarySuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ItemType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          29,
          30,
          31,
          32,
          33,
          34,
          -32768
        ],
        "type": "integer",
        "description": "0: Unknown\r\n\r\n1: Journal\r\n\r\n2: Article\r\n\r\n3: Book\r\n\r\n4: Proceeding\r\n\r\n5: Patent\r\n\r\n6: Image\r\n\r\n7: ClinicalTrial\r\n\r\n8: NewspaperArticle\r\n\r\n9: OnlineResource\r\n\r\n10: BookLoan\r\n\r\n11: BookPurchase\r\n\r\n12: Newspaper\r\n\r\n13: Standard\r\n\r\n14: Report\r\n\r\n15: Thesis\r\n\r\n16: BlankLabNotebook\r\n\r\n17: Subscription\r\n\r\n18: ExtStandard\r\n\r\n19: Document\r\n\r\n20: Video\r\n\r\n21: Sound\r\n\r\n29: packageinsert\r\n\r\n30: summaryproduct\r\n\r\n31: safetydatasheet\r\n\r\n32: dataonfile\r\n\r\n33: compendia\r\n\r\n34: RelatedItem\r\n\r\n-32768: CRQuickCheck\r\n\r\n",
        "format": "int32"
      },
      "JsonWebToken": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "nullable": true
          },
          "refresh_token": {
            "type": "string",
            "nullable": true
          },
          "token_type": {
            "type": "string",
            "nullable": true
          },
          "expires_in": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LibraryCustomField": {
        "type": "object",
        "properties": {
          "fieldSetId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "mapping": {
            "$ref": "#/components/schemas/LibraryCustomFieldMapping"
          },
          "defaultValue": {
            "type": "string",
            "nullable": true
          },
          "displayOrder": {
            "type": "integer",
            "format": "int32"
          },
          "options": {
            "$ref": "#/components/schemas/LibraryCustomFieldOptions"
          },
          "choices": {
            "type": "string",
            "nullable": true
          },
          "isStringField": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateField": {
            "type": "boolean",
            "readOnly": true
          },
          "isIntField": {
            "type": "boolean",
            "readOnly": true
          },
          "isRequired": {
            "type": "boolean",
            "readOnly": true
          },
          "isChoice": {
            "type": "boolean",
            "readOnly": true
          },
          "isMultiValue": {
            "type": "boolean",
            "readOnly": true
          },
          "useCheckbox": {
            "type": "boolean",
            "readOnly": true
          },
          "useTextbox": {
            "type": "boolean",
            "readOnly": true
          },
          "useDropdown": {
            "type": "boolean",
            "readOnly": true
          },
          "useMultiValueListbox": {
            "type": "boolean",
            "readOnly": true
          },
          "useLink": {
            "type": "boolean",
            "readOnly": true
          },
          "auditSource": {
            "type": "string",
            "nullable": true
          },
          "currentAuditLevel": {
            "$ref": "#/components/schemas/AuditLevel"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "inDb": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LibraryCustomFieldMapping": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          -1
        ],
        "type": "integer",
        "description": "0: CustomString1\r\n\r\n1: CustomString2\r\n\r\n2: CustomString3\r\n\r\n3: CustomString4\r\n\r\n4: CustomString5\r\n\r\n5: CustomString6\r\n\r\n6: CustomString7\r\n\r\n7: CustomString8\r\n\r\n8: CustomString9\r\n\r\n9: CustomString10\r\n\r\n10: CustomDate1\r\n\r\n11: CustomDate2\r\n\r\n12: CustomDate3\r\n\r\n13: CustomDate4\r\n\r\n14: CustomDate5\r\n\r\n15: CustomDate6\r\n\r\n16: CustomDate7\r\n\r\n17: CustomInt1\r\n\r\n18: CustomInt2\r\n\r\n19: CustomInt3\r\n\r\n20: CustomInt4\r\n\r\n21: CustomInt5\r\n\r\n22: CustomString11\r\n\r\n23: CustomString12\r\n\r\n24: CustomString13\r\n\r\n25: CustomString14\r\n\r\n26: CustomString15\r\n\r\n27: CustomString16\r\n\r\n28: CustomString17\r\n\r\n29: CustomString18\r\n\r\n30: CustomString19\r\n\r\n31: CustomString20\r\n\r\n-1: None\r\n\r\n",
        "format": "int32"
      },
      "LibraryCustomFieldOptions": {
        "enum": [
          0,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          57855
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n2: UICheckbox\r\n\r\n4: Required\r\n\r\n8: MultipleValues\r\n\r\n16: UIFreeText\r\n\r\n32: UIDropdown\r\n\r\n64: ReadOnly\r\n\r\n128: UILink\r\n\r\n57855: All\r\n\r\n",
        "format": "int32"
      },
      "LibraryDocument": {
        "type": "object",
        "properties": {
          "_oHoldingInfo": {
            "$ref": "#/components/schemas/HoldingInfoClass"
          },
          "_eReadState": {
            "$ref": "#/components/schemas/LibraryDocumentReadState"
          },
          "_oEPrintInfo": {
            "$ref": "#/components/schemas/EPrintInfo"
          },
          "_infoLink": {
            "type": "string",
            "nullable": true
          },
          "_source": {
            "$ref": "#/components/schemas/LibraryDocumentInfoSource"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "ownerId": {
            "type": "integer",
            "format": "int32"
          },
          "clientId": {
            "type": "integer",
            "format": "int32"
          },
          "ownerType": {
            "$ref": "#/components/schemas/LibraryDocumentOwnerType"
          },
          "documentType": {
            "$ref": "#/components/schemas/LibraryDocumentType"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "integer",
            "format": "int32"
          },
          "modifiedTime": {
            "type": "string",
            "format": "date-time"
          },
          "imageModifiedTime": {
            "type": "string",
            "format": "date-time"
          },
          "imageConvertingTime": {
            "type": "string",
            "format": "date-time"
          },
          "hasActualHtml": {
            "type": "boolean",
            "readOnly": true
          },
          "modifiedBy": {
            "type": "integer",
            "format": "int32"
          },
          "lastActivityTime": {
            "type": "string",
            "format": "date-time"
          },
          "publicationDate": {
            "$ref": "#/components/schemas/DateCode"
          },
          "pubDate": {
            "$ref": "#/components/schemas/ContentPubDate"
          },
          "assocOrderId": {
            "type": "integer",
            "format": "int32"
          },
          "isPrivate": {
            "type": "boolean",
            "readOnly": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "documentLink": {
            "type": "string",
            "nullable": true
          },
          "documentCitation": {
            "$ref": "#/components/schemas/Citation"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "thumbnailSmall": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "thumbnailLarge": {
            "type": "string",
            "format": "byte",
            "nullable": true,
            "readOnly": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true,
            "readOnly": true
          },
          "tocStatus": {
            "$ref": "#/components/schemas/TOCStatus"
          },
          "holdingInfo": {
            "$ref": "#/components/schemas/HoldingInfoClass"
          },
          "contentId": {
            "type": "integer",
            "format": "int32"
          },
          "partOfContentId": {
            "type": "integer",
            "format": "int32"
          },
          "referencedDocId": {
            "type": "integer",
            "format": "int32"
          },
          "persistance": {
            "$ref": "#/components/schemas/LibraryDocumentPersistance"
          },
          "isCitationEditable": {
            "type": "boolean",
            "readOnly": true
          },
          "isDeletable": {
            "type": "boolean",
            "readOnly": true
          },
          "libraryId": {
            "type": "integer",
            "format": "int32"
          },
          "libraryName": {
            "type": "string",
            "nullable": true
          },
          "copyrightType": {
            "$ref": "#/components/schemas/LibraryDocumentCopyrightType"
          },
          "holdingId": {
            "type": "integer",
            "format": "int32"
          },
          "isItemOfInterest": {
            "type": "boolean",
            "readOnly": true
          },
          "isLinkout": {
            "type": "boolean",
            "readOnly": true
          },
          "isPdf": {
            "type": "boolean",
            "readOnly": true
          },
          "isTif": {
            "type": "boolean",
            "readOnly": true
          },
          "isNote": {
            "type": "boolean",
            "readOnly": true
          },
          "readState": {
            "$ref": "#/components/schemas/LibraryDocumentReadState"
          },
          "attributes": {
            "$ref": "#/components/schemas/LibraryDocumentAttributes"
          },
          "ePrintInformation": {
            "$ref": "#/components/schemas/EPrintInfo"
          },
          "isEPrint": {
            "type": "boolean",
            "readOnly": true
          },
          "infoLink": {
            "type": "string",
            "nullable": true
          },
          "source": {
            "$ref": "#/components/schemas/LibraryDocumentInfoSource"
          },
          "customString1": {
            "type": "string",
            "nullable": true
          },
          "customString2": {
            "type": "string",
            "nullable": true
          },
          "customString3": {
            "type": "string",
            "nullable": true
          },
          "customString4": {
            "type": "string",
            "nullable": true
          },
          "customString5": {
            "type": "string",
            "nullable": true
          },
          "customString6": {
            "type": "string",
            "nullable": true
          },
          "customString7": {
            "type": "string",
            "nullable": true
          },
          "customString8": {
            "type": "string",
            "nullable": true
          },
          "customString9": {
            "type": "string",
            "nullable": true
          },
          "customString10": {
            "type": "string",
            "nullable": true
          },
          "customString11": {
            "type": "string",
            "nullable": true
          },
          "customString12": {
            "type": "string",
            "nullable": true
          },
          "customString13": {
            "type": "string",
            "nullable": true
          },
          "customString14": {
            "type": "string",
            "nullable": true
          },
          "customString15": {
            "type": "string",
            "nullable": true
          },
          "customString16": {
            "type": "string",
            "nullable": true
          },
          "customString17": {
            "type": "string",
            "nullable": true
          },
          "customString18": {
            "type": "string",
            "nullable": true
          },
          "customString19": {
            "type": "string",
            "nullable": true
          },
          "customString20": {
            "type": "string",
            "nullable": true
          },
          "customDate1": {
            "type": "string",
            "format": "date-time"
          },
          "customDate2": {
            "type": "string",
            "format": "date-time"
          },
          "customDate3": {
            "type": "string",
            "format": "date-time"
          },
          "customDate4": {
            "type": "string",
            "format": "date-time"
          },
          "customDate5": {
            "type": "string",
            "format": "date-time"
          },
          "customDate6": {
            "type": "string",
            "format": "date-time"
          },
          "customDate7": {
            "type": "string",
            "format": "date-time"
          },
          "customInt1": {
            "type": "integer",
            "format": "int32"
          },
          "customInt2": {
            "type": "integer",
            "format": "int32"
          },
          "customInt3": {
            "type": "integer",
            "format": "int32"
          },
          "customInt4": {
            "type": "integer",
            "format": "int32"
          },
          "customInt5": {
            "type": "integer",
            "format": "int32"
          },
          "drmRequired": {
            "type": "boolean"
          },
          "displayTitle": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "shortDisplayTitle": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "ratings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryDocumentRating"
            },
            "nullable": true,
            "readOnly": true
          },
          "categories": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "isDigitalLibraryLinkout": {
            "type": "boolean",
            "readOnly": true
          },
          "lastEnrichmentTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "readOnly": true
          },
          "auditSource": {
            "type": "string",
            "nullable": true
          },
          "currentAuditLevel": {
            "$ref": "#/components/schemas/AuditLevel"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "inDb": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentAttributeFilter": {
        "enum": [
          0,
          1,
          2,
          4,
          7,
          8,
          16,
          32,
          64,
          128
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: WithDocument\r\n\r\n2: Linkout\r\n\r\n4: ItemOfInterest\r\n\r\n7: All\r\n\r\n8: Purchase\r\n\r\n16: Private\r\n\r\n32: Public\r\n\r\n64: Unread\r\n\r\n128: EPrint\r\n\r\n",
        "format": "int32"
      },
      "LibraryDocumentAttributes": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: DRMRequired\r\n\r\n2: EPrint\r\n\r\n",
        "format": "int32"
      },
      "LibraryDocumentCopyrightType": {
        "enum": [
          0,
          1,
          3
        ],
        "type": "integer",
        "description": "0: Unknown\r\n\r\n1: OwnerOnly\r\n\r\n3: Clear\r\n\r\n",
        "format": "int32"
      },
      "LibraryDocumentCustomField": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "label": {
            "type": "string",
            "nullable": true
          },
          "value": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentExtOut": {
        "type": "object",
        "properties": {
          "libraryDocumentId": {
            "type": "integer",
            "format": "int32"
          },
          "documentType": {
            "$ref": "#/components/schemas/LibraryDocumentType"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "ownerId": {
            "type": "integer",
            "format": "int32"
          },
          "ownerType": {
            "$ref": "#/components/schemas/LibraryDocumentOwnerType"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "docLink": {
            "type": "string",
            "nullable": true
          },
          "persistance": {
            "$ref": "#/components/schemas/LibraryDocumentPersistance"
          },
          "assocOrderId": {
            "type": "integer",
            "format": "int32"
          },
          "contentId": {
            "type": "integer",
            "format": "int32"
          },
          "partOfContentId": {
            "type": "integer",
            "format": "int32"
          },
          "documentCitation": {
            "$ref": "#/components/schemas/ExtFullCitation"
          },
          "thumbnailSmall": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "thumbnailLarge": {
            "type": "string",
            "format": "byte",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "keywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "tocStatus": {
            "$ref": "#/components/schemas/TOCStatus"
          },
          "rank": {
            "type": "integer",
            "format": "int32"
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedTime": {
            "type": "string",
            "format": "date-time"
          },
          "imageModifiedTime": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "isCitationEditable": {
            "type": "boolean"
          },
          "isDeletable": {
            "type": "boolean"
          },
          "isNote": {
            "type": "boolean"
          },
          "holdingInfo": {
            "$ref": "#/components/schemas/HoldingInfoClass"
          },
          "linkoutProxyId": {
            "type": "integer",
            "format": "int32"
          },
          "libraryId": {
            "type": "integer",
            "format": "int32"
          },
          "copyrightType": {
            "$ref": "#/components/schemas/LibraryDocumentCopyrightType"
          },
          "readState": {
            "$ref": "#/components/schemas/LibraryDocumentReadState"
          },
          "attributes": {
            "$ref": "#/components/schemas/LibraryDocumentAttributes"
          },
          "publicationId": {
            "type": "integer",
            "format": "int32"
          },
          "articleId": {
            "type": "integer",
            "format": "int32"
          },
          "ratings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryDocumentRating"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentExtOutIEnumerableSuccessPagedInfoResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryDocumentExtOut"
            },
            "description": "Request result",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentField": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19,
          20,
          21,
          22,
          23,
          24,
          25,
          26,
          27,
          28,
          29,
          30,
          31,
          -1
        ],
        "type": "integer",
        "description": "0: CustomString1\r\n\r\n1: CustomString2\r\n\r\n2: CustomString3\r\n\r\n3: CustomString4\r\n\r\n4: CustomString5\r\n\r\n5: CustomString6\r\n\r\n6: CustomString7\r\n\r\n7: CustomString8\r\n\r\n8: CustomString9\r\n\r\n9: CustomString10\r\n\r\n10: CustomDate1\r\n\r\n11: CustomDate2\r\n\r\n12: CustomDate3\r\n\r\n13: CustomDate4\r\n\r\n14: CustomDate5\r\n\r\n15: CustomDate6\r\n\r\n16: CustomDate7\r\n\r\n17: CustomInt1\r\n\r\n18: CustomInt2\r\n\r\n19: CustomInt3\r\n\r\n20: CustomInt4\r\n\r\n21: CustomInt5\r\n\r\n22: CustomString11\r\n\r\n23: CustomString12\r\n\r\n24: CustomString13\r\n\r\n25: CustomString14\r\n\r\n26: CustomString15\r\n\r\n27: CustomString16\r\n\r\n28: CustomString17\r\n\r\n29: CustomString18\r\n\r\n30: CustomString19\r\n\r\n31: CustomString20\r\n\r\n-1: None\r\n\r\n",
        "format": "int32"
      },
      "LibraryDocumentFiltersModel": {
        "type": "object",
        "properties": {
          "ownerId": {
            "type": "integer",
            "description": "Required for personal documents. Owner identifier of the document, unique identifier of Infotrieve client. Should be the same as ClientId or not specified for the holdings",
            "format": "int32"
          },
          "requiredTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional. List of the document tags",
            "nullable": true
          },
          "requiredKeywords": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional. List of the document keywords",
            "nullable": true
          },
          "titlePrefix": {
            "type": "string",
            "description": "Optional. The document title prefix",
            "nullable": true
          },
          "author": {
            "type": "string",
            "description": "Optional. Author filter",
            "nullable": true
          },
          "pubStart": {
            "type": "integer",
            "description": "Start publication date. Format: YYYY (2018) or YYYYMM (201710)",
            "format": "int32",
            "nullable": true
          },
          "pubEnd": {
            "type": "integer",
            "description": "End publication date. Format: YYYY (2018) or YYYYMM (201710)",
            "format": "int32",
            "nullable": true
          },
          "libraryDocumentIds": {
            "type": "string",
            "description": "Optional. Comma-separated list of the library document identifiers. Should be used instead of LibraryDocumentId",
            "nullable": true
          },
          "attributes": {
            "$ref": "#/components/schemas/LibraryDocumentAttributeFilter"
          },
          "libraryViewFilters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryViewFilter"
            },
            "description": "Library view filters",
            "nullable": true
          },
          "libraryId": {
            "type": "integer",
            "description": "Optional. The document library identifier. Default is 0 - personal library",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryDocument"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentInfoModel": {
        "type": "object",
        "properties": {
          "libraryDocumentId": {
            "type": "integer",
            "description": "Unique identifier of the library document",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentInfoModelSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/LibraryDocumentInfoModel"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentInfoSource": {
        "enum": [
          0,
          1,
          -1
        ],
        "type": "integer",
        "description": "0: User\r\n\r\n1: Import\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "LibraryDocumentModel": {
        "type": "object",
        "properties": {
          "libraryId": {
            "type": "integer",
            "format": "int32"
          },
          "libraryName": {
            "type": "string",
            "nullable": true
          },
          "libraryDocumentId": {
            "type": "integer",
            "format": "int32"
          },
          "contentType": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentOwnerType": {
        "enum": [
          0,
          1,
          2,
          3,
          100
        ],
        "type": "integer",
        "description": "0: NotSpecified\r\n\r\n1: User\r\n\r\n2: SharedLibrary\r\n\r\n3: Client\r\n\r\n100: World\r\n\r\n",
        "format": "int32"
      },
      "LibraryDocumentPersistance": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: Unencrypted\r\n\r\n",
        "format": "int32"
      },
      "LibraryDocumentRating": {
        "type": "object",
        "properties": {
          "libraryDocumentId": {
            "type": "integer",
            "format": "int32"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "review": {
            "type": "string",
            "nullable": true
          },
          "ratingTime": {
            "type": "string",
            "format": "date-time"
          },
          "rating": {
            "type": "number",
            "format": "double"
          },
          "auditSource": {
            "type": "string",
            "nullable": true
          },
          "currentAuditLevel": {
            "$ref": "#/components/schemas/AuditLevel"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "inDb": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentReadState": {
        "enum": [
          0,
          1,
          -1
        ],
        "type": "integer",
        "description": "0: NotRead\r\n\r\n1: Read\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "LibraryDocumentRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The document title",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "description": "Content type of the document",
            "nullable": true
          },
          "docLink": {
            "type": "string",
            "description": "Document link",
            "nullable": true
          },
          "infoLink": {
            "type": "string",
            "description": "Information link",
            "nullable": true
          },
          "documentCitation": {
            "$ref": "#/components/schemas/ExtFullCitationModel"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Document tags",
            "nullable": true
          },
          "contentId": {
            "type": "integer",
            "description": "Unique identifier of the document content",
            "format": "int32"
          },
          "copyrightType": {
            "$ref": "#/components/schemas/LibraryDocumentCopyrightType"
          },
          "documentContents": {
            "type": "string",
            "description": "The document contents",
            "format": "byte",
            "nullable": true
          },
          "duplicateHandling": {
            "$ref": "#/components/schemas/DuplicateHandling"
          },
          "libraryId": {
            "type": "integer",
            "description": "Identifier of the target Shared Library",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LibraryDocumentSort": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          115,
          116,
          117,
          118,
          119,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          128,
          129,
          130,
          131
        ],
        "type": "integer",
        "description": "0: Title\r\n\r\n1: LastUpdate\r\n\r\n2: PublicationDate\r\n\r\n3: Relevance\r\n\r\n4: ParentTitle\r\n\r\n100: CustomString1\r\n\r\n101: CustomString2\r\n\r\n102: CustomString3\r\n\r\n103: CustomString4\r\n\r\n104: CustomString5\r\n\r\n105: CustomString6\r\n\r\n106: CustomString7\r\n\r\n107: CustomString8\r\n\r\n108: CustomString9\r\n\r\n109: CustomString10\r\n\r\n110: CustomDate1\r\n\r\n111: CustomDate2\r\n\r\n112: CustomDate3\r\n\r\n113: CustomDate4\r\n\r\n114: CustomDate5\r\n\r\n115: CustomDate6\r\n\r\n116: CustomDate7\r\n\r\n117: CustomInt1\r\n\r\n118: CustomInt2\r\n\r\n119: CustomInt3\r\n\r\n120: CustomInt4\r\n\r\n121: CustomInt5\r\n\r\n122: CustomString11\r\n\r\n123: CustomString12\r\n\r\n124: CustomString13\r\n\r\n125: CustomString14\r\n\r\n126: CustomString15\r\n\r\n127: CustomString16\r\n\r\n128: CustomString17\r\n\r\n129: CustomString18\r\n\r\n130: CustomString19\r\n\r\n131: CustomString20\r\n\r\n",
        "format": "int32"
      },
      "LibraryDocumentType": {
        "enum": [
          0,
          2,
          3,
          4,
          5,
          6,
          1000
        ],
        "type": "integer",
        "description": "0: Unknown\r\n\r\n2: Document\r\n\r\n3: Publication\r\n\r\n3: Content\r\n\r\n4: Article\r\n\r\n5: PublicationHolding\r\n\r\n6: ArticleHolding\r\n\r\n1000: Folder\r\n\r\n",
        "format": "int32"
      },
      "LibraryFieldSet": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "icon": {
            "$ref": "#/components/schemas/LibraryFieldSetIcon"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryCustomField"
            },
            "nullable": true,
            "readOnly": true
          },
          "auditSource": {
            "type": "string",
            "nullable": true
          },
          "currentAuditLevel": {
            "$ref": "#/components/schemas/AuditLevel"
          },
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "inDb": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LibraryFieldSetIcon": {
        "enum": [
          0,
          1,
          2,
          3,
          -1
        ],
        "type": "integer",
        "description": "0: Default\r\n\r\n1: Check\r\n\r\n2: Articles\r\n\r\n3: Document\r\n\r\n-1: None\r\n\r\n",
        "format": "int32"
      },
      "LibraryInfoModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isMember": {
            "type": "boolean"
          },
          "canAddDocuments": {
            "type": "boolean"
          },
          "canEditDocuments": {
            "type": "boolean"
          },
          "canDeleteDocuments": {
            "type": "boolean"
          },
          "canShareDocuments": {
            "type": "boolean"
          },
          "canCommentOnDocuments": {
            "type": "boolean"
          },
          "canRateDocuments": {
            "type": "boolean"
          },
          "canAnnotateDocuments": {
            "type": "boolean"
          },
          "discussionsAllowed": {
            "type": "boolean"
          },
          "canEditTags": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LibraryInfoModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryInfoModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LibraryTagModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "LibraryTagModelIEnumerableSuccessPagedInfoResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryTagModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LibraryViewFilter": {
        "type": "object",
        "properties": {
          "field": {
            "$ref": "#/components/schemas/LibraryDocumentField"
          },
          "type": {
            "$ref": "#/components/schemas/LibraryViewFilterType"
          },
          "stringOptions": {
            "$ref": "#/components/schemas/LibraryViewFilterStringOptions"
          },
          "dateOptions": {
            "$ref": "#/components/schemas/LibraryViewFilterDateOptions"
          },
          "intOptions": {
            "$ref": "#/components/schemas/LibraryViewFilterIntOptions"
          },
          "data": {
            "type": "string",
            "nullable": true
          },
          "isStringFilter": {
            "type": "boolean",
            "readOnly": true
          },
          "isDateFilter": {
            "type": "boolean",
            "readOnly": true
          },
          "isIntFilter": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LibraryViewFilterDateOptions": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          11,
          12,
          -1
        ],
        "type": "integer",
        "description": "0: Today\r\n\r\n1: Yesterday\r\n\r\n2: This_Week\r\n\r\n3: Last_Week\r\n\r\n4: This_Month\r\n\r\n5: Last_Month\r\n\r\n6: Last_3_Months\r\n\r\n7: Last_6_Months\r\n\r\n8: This_Year\r\n\r\n9: Last_Year\r\n\r\n11: Prior_Quarter\r\n\r\n12: Custom\r\n\r\n-1: NotApplicable\r\n\r\n",
        "format": "int32"
      },
      "LibraryViewFilterIntOptions": {
        "enum": [
          0,
          1,
          -1
        ],
        "type": "integer",
        "description": "0: Equals\r\n\r\n1: NotEquals\r\n\r\n-1: NotApplicable\r\n\r\n",
        "format": "int32"
      },
      "LibraryViewFilterStringOptions": {
        "enum": [
          0,
          1,
          2,
          3,
          -1
        ],
        "type": "integer",
        "description": "0: Fulltext\r\n\r\n1: Term\r\n\r\n2: Prefix\r\n\r\n3: MultipleValues\r\n\r\n-1: NotApplicable\r\n\r\n",
        "format": "int32"
      },
      "LibraryViewFilterType": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: Excluded\r\n\r\n1: View\r\n\r\n2: User\r\n\r\n",
        "format": "int32"
      },
      "LocationModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "address": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "contactUser": {
            "$ref": "#/components/schemas/ContactModel"
          },
          "trackingFieldsDefaults": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "trackingFieldsValues": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LocationModelSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/LocationModel"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LogsRequest": {
        "type": "object",
        "properties": {
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CiteItLog"
            },
            "description": "Logs with message and data",
            "nullable": true
          },
          "userIdentity": {
            "type": "string",
            "description": "Authorizing user (User Id or email, required or optional depending on authorization type)",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LookupTerm": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "nullable": true
          },
          "descriptorId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "topicGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "descriptorName": {
            "type": "string",
            "nullable": true
          },
          "vocabularyId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "vocabularyGuid": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "vocabularyName": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "$ref": "#/components/schemas/SearchBlockType"
          },
          "marker": {
            "type": "string",
            "nullable": true
          },
          "externalId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LookupTermIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookupTerm"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LookupTermSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/LookupTerm"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "LuceneSearchRequest": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Enter search query.",
            "nullable": true
          },
          "startRecord": {
            "type": "integer",
            "description": "Start record.",
            "format": "int32",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Record count.",
            "format": "int32",
            "nullable": true
          },
          "defaultFields": {
            "type": "string",
            "nullable": true
          },
          "contentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Content Ids",
            "nullable": true
          },
          "sortOrder": {
            "$ref": "#/components/schemas/ContentSearchSortOrder"
          },
          "sortDirection": {
            "$ref": "#/components/schemas/ContentSearchSortDir"
          },
          "includeAbstracts": {
            "type": "boolean",
            "description": "Include abstract to each content in the response. Default value is false.",
            "nullable": true
          },
          "includeHighlighting": {
            "type": "boolean",
            "description": "Include Highlighting for each content in the response. Default value is false",
            "nullable": true
          },
          "includeClips": {
            "type": "boolean",
            "description": "Include Text Clips for each content in the response if available. Default value is false",
            "nullable": true
          },
          "includeMatchCounts": {
            "type": "boolean",
            "description": "Include Match Counts for each content in the response. Default value is false",
            "nullable": true
          },
          "includeHoldingsFlag": {
            "type": "boolean",
            "description": "Include Holdings Flag for each content in the response. Default value is false",
            "nullable": true
          },
          "includeVocabAggregates": {
            "type": "boolean",
            "description": "Include Vocab Aggregates across entire catalog. Default value is false",
            "nullable": true
          },
          "includeDescriptors": {
            "type": "boolean",
            "description": "Include Descriptors for each content in the response and calculate aggregate across all results. Default value is false",
            "nullable": true
          },
          "includeLibraries": {
            "type": "boolean",
            "description": "Include shared libraries for the query."
          },
          "includeCollections": {
            "$ref": "#/components/schemas/CollectionFilter"
          },
          "includeAltTitles": {
            "type": "boolean",
            "description": "Include alternative titles to each content in the response. Default value is false."
          },
          "includeParentData": {
            "type": "boolean",
            "description": "Include parent data to each content in the response. Default value is false."
          },
          "options": {
            "type": "string",
            "description": "Comma separated list of flags for Lucene Search.<br />\r\nAvailable options:\r\n<list type=\"bullet\"><item><term>\r\n\t\t\t\tON(OFF)EXACTSEARCH\r\n\t\t\t</term><description>\r\n\t\t\t\tOn or off exact search for quoted sentences\r\n\t\t\t</description></item><item><term>\r\n\t\t\t\tON(OFF)UISEARCH\r\n\t\t\t</term><description>\r\n\t\t\t\tOn or off search behavior like on RFE UI search.\r\n\t\t\t\tCombination of UISERACHFIELDS, UISEARCHTITLEBOOST and UISEARCHWEIGHTS options\r\n\t\t\t</description></item><item><term>\r\n\t\t\t\tON(OFF)UISERACHFIELDS\r\n\t\t\t</term><description>\r\n\t\t\t\tIf on pre populates UI default search fields with search fields specific for RFE UI search\r\n\t\t\t</description></item><item><term>\r\n\t\t\t\tON(OFF)UISEARCHTITLEBOOST\r\n\t\t\t</term><description>\r\n\t\t\t\tEnable (disable) specific boosting techniques for a content title like it is currently done for UI Search\r\n\t\t\t</description></item><item><term>\r\n\t\t\t\tON(OFF)UISEARCHWEIGHTS\r\n\t\t\t</term><description>\r\n\t\t\t\tEnable (disable) using UI Search weights (boosting) for Lucene API\r\n\t\t\t</description></item></list>",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MatchDocumentRequest": {
        "type": "object",
        "properties": {
          "contentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Content Ids array.",
            "nullable": true
          },
          "doIs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "DOIs array.",
            "nullable": true
          },
          "patentNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Patent Number array.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Media": {
        "enum": [
          0,
          1,
          2,
          4,
          4096
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: Paper\r\n\r\n2: Scan\r\n\r\n4: Digital\r\n\r\n4096: Default\r\n\r\n",
        "format": "int32"
      },
      "ModifiedByTypes": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "0: Unknown\r\n\r\n1: User\r\n\r\n2: ImportJob\r\n\r\n3: MaintenanceTask\r\n\r\n",
        "format": "int32"
      },
      "NewOrder": {
        "type": "object",
        "properties": {
          "quoteOnly": {
            "type": "boolean",
            "description": "Optional. false to place an order. true to get an estimated price quote without actually placing the order. false is the default value."
          },
          "allowSpecialOrder": {
            "type": "boolean",
            "description": "Optional. true for normal order processing. false to prevent orders that cannot be immediately filled and may require referencing or advanced services. true is the default value."
          },
          "orderItemType": {
            "$ref": "#/components/schemas/OrderItemTypes"
          },
          "contentId": {
            "type": "integer",
            "description": "Optional. Unique RFE content id of the content item to order. Specify 0 or omit if ordering by Citation",
            "format": "int32"
          },
          "citation": {
            "$ref": "#/components/schemas/OrderCitation"
          },
          "copies": {
            "type": "integer",
            "description": "Optional. Number of copies required. Default value is 1.",
            "format": "int32"
          },
          "useId": {
            "type": "integer",
            "description": "Optional. The id of the rights alias that defines how the user intends to use the ordered article/publication. Default Value: 0.",
            "format": "int32"
          },
          "locationOverride": {
            "type": "string",
            "description": "Optional. Location where content will be used if different from the user's location.",
            "nullable": true
          },
          "specInstruct": {
            "$ref": "#/components/schemas/SpecialInstructions"
          },
          "customSpecInstruct": {
            "type": "string",
            "description": "Optional. A custom special instruction. Used only if Custom is specified in SpecInstruct",
            "nullable": true
          },
          "possession": {
            "$ref": "#/components/schemas/OrderOriginalPossession"
          },
          "deliveryProfileName": {
            "type": "string",
            "description": "Optional. Name of the delivery profile the specifies delivery parameters for this order. If not specified, the user's default delivery profile will be used.",
            "nullable": true
          },
          "urgency": {
            "$ref": "#/components/schemas/DeliveryUrgency"
          },
          "billRef": {
            "type": "string",
            "description": "Optional. Client-defined value. CCC does not use this information but it will be associated with the order and available for reporting purposes.",
            "nullable": true
          },
          "costCenter": {
            "type": "string",
            "description": "Optional. Client-defined value. CCC does not use this information but it will be associated with the order and available for reporting purposes.",
            "nullable": true
          },
          "po": {
            "type": "string",
            "description": "Optional. Client-defined value. CCC does not use this information but it will be associated with the order and available for reporting purposes.",
            "nullable": true
          },
          "custOrderNum": {
            "type": "string",
            "description": "Optional. Client-defined value. CCC does not use this information but it will be associated with the order and available for reporting purposes.",
            "nullable": true
          },
          "source": {
            "type": "string",
            "description": "Optional. Represents the source of the order (e.g. 'Web', 'A-Z List', 'Marketting', etc.). The source value is associated with the order and can be used for reporting orders by source.",
            "nullable": true
          },
          "priceLimit": {
            "type": "number",
            "description": "Optional. Maximum cost allowed for this order. It can only be less than or equal to the price limit of your account. When not present, the price limit of the order is determined by your account setup.",
            "format": "double",
            "nullable": true
          },
          "expiration": {
            "type": "string",
            "description": "Optional. A date or date/time by which the order must be filled. If the order is not filled by this time it will be automatically cancelled. Default is to never automatically cancel the order.",
            "format": "date-time",
            "nullable": true
          },
          "deliveryAddressOverride": {
            "$ref": "#/components/schemas/OrderDeliveryAddress"
          },
          "additionalInfo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewOrderResult": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "Id of order in RightFind.",
            "format": "int32"
          },
          "initialStatus": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "estimatedCostInUSD": {
            "type": "number",
            "description": "The estimated cost of the order in US dollars.",
            "format": "double"
          },
          "estimatedCostInClientCurrency": {
            "type": "number",
            "description": "The estimated cost of the order in the currency specified for the client.",
            "format": "double"
          },
          "estimatedTaxInUSD": {
            "type": "number",
            "description": "The estimated tax expense of the order in US dollars.",
            "format": "double"
          },
          "estimatedTaxInClientCurrency": {
            "type": "number",
            "description": "The estimated tax expense of the order in the currency specified for the client.",
            "format": "double"
          },
          "usageStatement": {
            "type": "string",
            "description": "A statement of publication/article usage suitable for display to a user.",
            "nullable": true
          },
          "deliveryStatement": {
            "type": "string",
            "description": "A delivery statement suitable for display to a user.",
            "nullable": true
          },
          "orderTitle": {
            "type": "string",
            "description": "Order Title for display to a user.",
            "nullable": true
          },
          "cartId": {
            "type": "integer",
            "description": "Order cart id.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "NewOrderResultSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/NewOrderResult"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NoPreviewReason": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: NoMatches\r\n\r\n1: UserNotConfigured\r\n\r\n2: None\r\n\r\n",
        "format": "int32"
      },
      "OpenAccessLicenseType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          -1
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: CC_BY\r\n\r\n2: CC_BY_NC\r\n\r\n3: CC_BY_NC_ND\r\n\r\n4: CC_BY_NC_SA\r\n\r\n5: CC_BY_ND\r\n\r\n6: CC_BY_SA\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "Order": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "format": "int32"
          },
          "orderStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderStatusEntry"
            },
            "nullable": true
          },
          "orderInfo": {
            "$ref": "#/components/schemas/OrderInfo"
          },
          "orderFees": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderFee"
            },
            "nullable": true
          },
          "orderNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderNote"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderCancelResult": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "description": "Echo of InfotrieveOrderId specified in the request.",
            "format": "int32"
          },
          "orderDate": {
            "type": "string",
            "description": "The original date and time or the order in UTC.",
            "format": "date-time"
          },
          "costInUSD": {
            "type": "number",
            "description": "The final cost of the cancelled order in US dollars.",
            "format": "double"
          },
          "costInClientCurrency": {
            "type": "number",
            "description": "The final cost of the cancelled order in the client's specified currency.",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "OrderCancelResultSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/OrderCancelResult"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrderCitation": {
        "type": "object",
        "properties": {
          "genre": {
            "$ref": "#/components/schemas/Genres"
          },
          "standardNum": {
            "type": "string",
            "nullable": true
          },
          "doi": {
            "type": "string",
            "nullable": true
          },
          "pmid": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "publicationName": {
            "type": "string",
            "nullable": true
          },
          "volume": {
            "type": "string",
            "nullable": true
          },
          "issue": {
            "type": "string",
            "nullable": true
          },
          "pages": {
            "type": "string",
            "nullable": true
          },
          "authors": {
            "type": "string",
            "nullable": true
          },
          "publisher": {
            "type": "string",
            "nullable": true
          },
          "publicationDate": {
            "type": "string",
            "nullable": true
          },
          "supplementOrChapter": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderCloseReason": {
        "enum": [
          0,
          1,
          100,
          101,
          102,
          103,
          104,
          105,
          106,
          107,
          108,
          109,
          110,
          111,
          112,
          113,
          114,
          120,
          121,
          122,
          123,
          124,
          125,
          126,
          127,
          -1
        ],
        "type": "integer",
        "description": "0: NotClosed\r\n\r\n1: Filled\r\n\r\n100: Unreferencable\r\n\r\n101: Unclearable\r\n\r\n102: Unfulfillable\r\n\r\n103: UnDeliverable\r\n\r\n104: UserCostDecision\r\n\r\n105: UserTimeDecision\r\n\r\n106: UserOtherDecision\r\n\r\n107: WhileSuspended\r\n\r\n108: Voided\r\n\r\n109: ExternalTransaction\r\n\r\n110: Expired\r\n\r\n111: PLEExpired\r\n\r\n112: PriceLimitExceeded\r\n\r\n113: PriceQuoteExceeded\r\n\r\n114: PQEExpired\r\n\r\n120: DuplicateOrder\r\n\r\n121: DuplicateOrderExpired\r\n\r\n122: UserDuplicateDecision\r\n\r\n123: NoSpecialOrders\r\n\r\n124: RNVCancelled\r\n\r\n125: RNVExpired\r\n\r\n126: ClearanceProhibited\r\n\r\n127: SuspensionExpired\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "OrderDeliveryAddress": {
        "type": "object",
        "properties": {
          "deliveryMethod": {
            "type": "string",
            "description": "Delivery method.",
            "nullable": true
          },
          "email": {
            "type": "string",
            "description": "Email address. Required if DeliveryMethod is email.",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "description": "Address line one for physical mailing. At least one address line is required for physical mailing.",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "description": "Address line two for physical mailing.",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "description": "Address line three for physical mailing.",
            "nullable": true
          },
          "city": {
            "type": "string",
            "description": "City for physical mailing.",
            "nullable": true
          },
          "state": {
            "type": "string",
            "description": "State for physical mailing.",
            "nullable": true
          },
          "country": {
            "type": "string",
            "description": "Country for physical mailing.",
            "nullable": true
          },
          "zip": {
            "type": "string",
            "description": "Zip/Postal Code for physical mailing.",
            "nullable": true
          },
          "arielAddress": {
            "type": "string",
            "description": "Email or IP address for Ariel deliveries.",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "description": "Fax Number. Required if DeliveryMethod is Fax, Faxsimile.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderFee": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Record Id.",
            "format": "int32"
          },
          "feeUSD": {
            "type": "number",
            "description": "Fee in USD currency.",
            "format": "double"
          },
          "feeUserCurrency": {
            "type": "number",
            "description": "Fee in client's local currency.",
            "format": "double"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the record.",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "description": "Date and time when record was created.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "OrderIEnumerableSuccessPagedInfoResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            },
            "description": "Request result",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrderInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "cartId": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "$ref": "#/components/schemas/OrderType"
          },
          "itemType": {
            "$ref": "#/components/schemas/ItemType"
          },
          "status": {
            "$ref": "#/components/schemas/OrderStatus"
          },
          "userId": {
            "type": "integer",
            "format": "int32"
          },
          "userEmail": {
            "type": "string",
            "nullable": true
          },
          "createdById": {
            "type": "integer",
            "format": "int32"
          },
          "createdByEmail": {
            "type": "string",
            "nullable": true
          },
          "createdTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedTime": {
            "type": "string",
            "format": "date-time"
          },
          "originalCitation": {
            "$ref": "#/components/schemas/ExtFullCitation"
          },
          "referencedCitation": {
            "$ref": "#/components/schemas/ExtFullCitation"
          },
          "copyrightStatus": {
            "$ref": "#/components/schemas/CopyrightStatus"
          },
          "closeReason": {
            "$ref": "#/components/schemas/OrderCloseReason"
          },
          "cancelReason": {
            "type": "string",
            "nullable": true
          },
          "useId": {
            "type": "integer",
            "format": "int32"
          },
          "copies": {
            "type": "integer",
            "format": "int32"
          },
          "referencedTime": {
            "type": "string",
            "format": "date-time"
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time"
          },
          "urgency": {
            "$ref": "#/components/schemas/DeliveryUrgency"
          },
          "profileId": {
            "type": "integer",
            "format": "int32"
          },
          "promisedBy": {
            "type": "string",
            "format": "date-time"
          },
          "originalPromisedBy": {
            "type": "string",
            "format": "date-time"
          },
          "specialInstructions": {
            "$ref": "#/components/schemas/OrderSpecInstruct"
          },
          "customSpecialInstructions": {
            "type": "string",
            "nullable": true
          },
          "priceLimit": {
            "type": "number",
            "format": "double"
          },
          "feeTransactionUSD": {
            "type": "number",
            "format": "double"
          },
          "feeTransactionUserCurrency": {
            "type": "number",
            "format": "double"
          },
          "feeCRUSD": {
            "type": "number",
            "format": "double"
          },
          "feeCRUserCurrency": {
            "type": "number",
            "format": "double"
          },
          "feeFFUSD": {
            "type": "number",
            "format": "double"
          },
          "feeFFUserCurrency": {
            "type": "number",
            "format": "double"
          },
          "feeAdvRefUSD": {
            "type": "number",
            "format": "double"
          },
          "feeAdvRefUserCurrency": {
            "type": "number",
            "format": "double"
          },
          "feeCRServicesUSD": {
            "type": "number",
            "format": "double"
          },
          "feeCRServicesUserCurrency": {
            "type": "number",
            "format": "double"
          },
          "feeSHUSD": {
            "type": "number",
            "format": "double"
          },
          "feeSHUserCurrency": {
            "type": "number",
            "format": "double"
          },
          "feeTaxUSD": {
            "type": "number",
            "format": "double"
          },
          "feeTaxUserCurrency": {
            "type": "number",
            "format": "double"
          },
          "feeOtherUSD": {
            "type": "number",
            "format": "double"
          },
          "feeOtherUserCurrency": {
            "type": "number",
            "format": "double"
          },
          "feeTotalUSD": {
            "type": "number",
            "format": "double"
          },
          "feeTotalUserCurrency": {
            "type": "number",
            "format": "double"
          },
          "link": {
            "type": "string",
            "nullable": true
          },
          "linkExpiration": {
            "type": "string",
            "format": "date-time"
          },
          "rawLink": {
            "type": "string",
            "nullable": true
          },
          "costCenter": {
            "type": "string",
            "nullable": true
          },
          "billRef": {
            "type": "string",
            "nullable": true
          },
          "po": {
            "type": "string",
            "nullable": true
          },
          "custOrderNum": {
            "type": "string",
            "nullable": true
          },
          "allowedViews": {
            "type": "integer",
            "format": "int32"
          },
          "allowedPrints": {
            "type": "integer",
            "format": "int32"
          },
          "allowedViewsLeft": {
            "type": "integer",
            "format": "int32"
          },
          "allowedPrintsLeft": {
            "type": "integer",
            "format": "int32"
          },
          "drmStmt": {
            "type": "string",
            "nullable": true
          },
          "copyrightTerms": {
            "type": "string",
            "nullable": true
          },
          "fulfillmentStmt": {
            "type": "string",
            "nullable": true
          },
          "usageStmt": {
            "type": "string",
            "nullable": true
          },
          "deliveryStmt": {
            "type": "string",
            "nullable": true
          },
          "deliveryProfileId": {
            "type": "integer",
            "format": "int32"
          },
          "deliveryProfileName": {
            "type": "string",
            "nullable": true
          },
          "deliveryMethod": {
            "$ref": "#/components/schemas/DeliveryMethod"
          },
          "deliveryAddress": {
            "type": "string",
            "nullable": true
          },
          "deliveryCity": {
            "type": "string",
            "nullable": true
          },
          "deliveryTerritory": {
            "type": "string",
            "nullable": true
          },
          "deliveryCountry": {
            "type": "string",
            "nullable": true
          },
          "deliveryPostalCode": {
            "type": "string",
            "nullable": true
          },
          "deliveryTracking": {
            "type": "string",
            "nullable": true
          },
          "deliveryTime": {
            "type": "string",
            "format": "date-time"
          },
          "libraryDocumentId": {
            "type": "integer",
            "format": "int32"
          },
          "contentId": {
            "type": "integer",
            "format": "int32"
          },
          "partOfContentId": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "OrderItemTypes": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          100,
          -1
        ],
        "type": "integer",
        "description": "0: JournalArticle\r\n\r\n1: BookSection\r\n\r\n2: Proceeding\r\n\r\n3: Patent\r\n\r\n4: BookLoan\r\n\r\n5: BookPurchase\r\n\r\n6: Standard\r\n\r\n7: Report\r\n\r\n8: Thesis\r\n\r\n100: Other\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "OrderLinkType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: PlaceOrder\r\n\r\n1: OrderView\r\n\r\n",
        "format": "int32"
      },
      "OrderNote": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Record Id.",
            "format": "int32"
          },
          "timeLogged": {
            "type": "string",
            "description": "Date and time when record was created.",
            "format": "date-time"
          },
          "loggedBy": {
            "type": "string",
            "description": "User account who created the note(Email).",
            "nullable": true
          },
          "note": {
            "type": "string",
            "description": "Note text.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderOriginalPossession": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "0: Unknown\r\n\r\n1: None\r\n\r\n2: Paper\r\n\r\n3: Electronic\r\n\r\n",
        "format": "int32"
      },
      "OrderPreview": {
        "type": "object",
        "properties": {
          "qlu": {
            "type": "string",
            "description": "Required if no ContentId provided. Citation search expression.",
            "nullable": true
          },
          "option": {
            "$ref": "#/components/schemas/OrderPreviewOption"
          },
          "contentId": {
            "type": "integer",
            "description": "Required if no Qlu provided. Search by ContentId (Catalog Id).",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderPreviewCitationResult": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Citation description text.",
            "nullable": true
          },
          "contentId": {
            "type": "integer",
            "description": "Citation Content Id.",
            "format": "int32"
          },
          "citation": {
            "$ref": "#/components/schemas/SearchMatchCitation"
          },
          "orderUrl": {
            "type": "string",
            "description": "Citation order URL.",
            "nullable": true
          },
          "openAccessBadge": {
            "type": "boolean",
            "description": "Open access badge."
          },
          "clearanceOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderPreviewOptionsResult"
            },
            "description": "Citation Copyright Clearance options.",
            "nullable": true
          },
          "docDelOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderPreviewOptionsResult"
            },
            "description": "Citation Document Delivery options.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderPreviewOption": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n0: Default\r\n\r\n1: CopyrightPermissions\r\n\r\n2: DocumentDelivery\r\n\r\n3: Both\r\n\r\n",
        "format": "int32"
      },
      "OrderPreviewOptionPriceResult": {
        "type": "object",
        "properties": {
          "currencySymbol": {
            "type": "string",
            "description": "User currency symbol.",
            "nullable": true,
            "readOnly": true
          },
          "statement": {
            "type": "string",
            "description": "Fee statement.",
            "nullable": true,
            "readOnly": true
          },
          "feeUsd": {
            "type": "number",
            "description": "Fee in USD.",
            "format": "double",
            "readOnly": true
          },
          "fee": {
            "type": "number",
            "description": "Fee in user's currency.",
            "format": "double",
            "readOnly": true
          },
          "displayFee": {
            "type": "string",
            "description": "Display fee representation.",
            "nullable": true,
            "readOnly": true
          },
          "estimated": {
            "type": "boolean",
            "description": "Is estimated value.",
            "readOnly": true
          },
          "isTbd": {
            "type": "boolean",
            "description": "Is TBD.",
            "readOnly": true
          },
          "crPerPageFeeUsd": {
            "type": "number",
            "description": "Copyright per page fee if available in USD.",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "crPerPageFee": {
            "type": "number",
            "description": "Copyright per page fee if available in user's currency.",
            "format": "double",
            "nullable": true,
            "readOnly": true
          },
          "displayCrPerPageFee": {
            "type": "string",
            "description": "Display copyright per page fee representation.",
            "nullable": true,
            "readOnly": true
          },
          "priceLimitUsd": {
            "type": "number",
            "description": "Price limit in USD.",
            "format": "double",
            "readOnly": true
          },
          "priceLimit": {
            "type": "number",
            "description": "Price limit in currency of an order.",
            "format": "double",
            "readOnly": true
          },
          "displayPriceLimit": {
            "type": "string",
            "description": "Display price limit representation",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrderPreviewOptionsResult": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Use name/Right alias name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Use description/Right alias description.",
            "nullable": true
          },
          "useId": {
            "type": "integer",
            "description": "Identifier of order usage.",
            "format": "int32"
          },
          "heading": {
            "type": "boolean",
            "description": "Is heading option."
          },
          "clearance": {
            "type": "boolean",
            "description": "true if Copyright Clearance options."
          },
          "deliveryStatementHtml": {
            "type": "string",
            "description": "Order delivery statement in HTML format.",
            "nullable": true
          },
          "termsHtml": {
            "type": "string",
            "description": "Order Terms in HTML format.",
            "nullable": true
          },
          "displayTermsRequired": {
            "type": "boolean",
            "description": "Is display terms are required."
          },
          "price": {
            "$ref": "#/components/schemas/OrderPreviewOptionPriceResult"
          }
        },
        "additionalProperties": false
      },
      "OrderPreviewResult": {
        "type": "object",
        "properties": {
          "noPreview": {
            "type": "boolean",
            "description": "False if unable to fetch preview information."
          },
          "noPreviewReason": {
            "$ref": "#/components/schemas/NoPreviewReason"
          },
          "contextOrderResult": {
            "$ref": "#/components/schemas/ContextOrderResult"
          },
          "preview": {
            "$ref": "#/components/schemas/OrderPreviewCitationResult"
          }
        },
        "additionalProperties": false
      },
      "OrderPreviewResultSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/OrderPreviewResult"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrderSpecInstruct": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          256,
          512,
          1024,
          2048,
          4096,
          8192,
          16384,
          32768,
          65536,
          131072,
          262144,
          524288,
          1048576,
          2097152,
          4194304,
          8388608,
          16777216,
          33554432,
          67108864,
          134217728,
          268435456,
          536870912,
          1073741824,
          1610612855,
          1678770687,
          2147483648,
          4294967296,
          8589934592,
          17179869184,
          34359738368,
          68719476736
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: TitlePageReq\r\n\r\n2: CleanCopyReq\r\n\r\n4: Color\r\n\r\n8: ImmediateFillOnly\r\n\r\n16: EnglishOnly\r\n\r\n32: EnglishPreferred\r\n\r\n64: TOCReq\r\n\r\n128: OCRReq\r\n\r\n256: Expedite\r\n\r\n512: Cheapest\r\n\r\n1024: NoSpecialOrder\r\n\r\n2048: ForceQA\r\n\r\n4096: QuickCheck\r\n\r\n8192: EPrint\r\n\r\n16384: AllowDRM\r\n\r\n32768: NoEmailFF\r\n\r\n65536: QuietMode\r\n\r\n131072: Debug\r\n\r\n262144: NoAutoSource\r\n\r\n524288: Invert\r\n\r\n1048576: TestOrder\r\n\r\n2097152: NoCopyright\r\n\r\n4194304: AutoVoid\r\n\r\n8388608: NoQA\r\n\r\n16777216: NoCoversheet\r\n\r\n33554432: NoDRM\r\n\r\n67108864: ExternalFillOnly\r\n\r\n134217728: OrderEntry\r\n\r\n268435456: ForceInstructions\r\n\r\n536870912: PublisherOriginal\r\n\r\n1073741824: Custom\r\n\r\n1610612855: AllCollection\r\n\r\n1678770687: AllUser\r\n\r\n2147483648: RROOnly\r\n\r\n4294967296: IncludeSupplementalMaterial\r\n\r\n8589934592: SupplementalMaterialsOnly\r\n\r\n17179869184: CrossMarkUpdate\r\n\r\n34359738368: UpdateDigitalLibrary\r\n\r\n68719476736: AutoSupplementalMaterial\r\n\r\n",
        "format": "int64"
      },
      "OrderStatus": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          49,
          50,
          100,
          102,
          150,
          151,
          200,
          -1
        ],
        "type": "integer",
        "description": "0: New\r\n\r\n1: ManualRefClient\r\n\r\n2: ManualRef\r\n\r\n3: Clearance\r\n\r\n4: ManualClearance\r\n\r\n5: Sourcing\r\n\r\n6: ManualSourcing\r\n\r\n7: PendingFulfillment\r\n\r\n8: PendingQA\r\n\r\n9: PendingDelivery\r\n\r\n10: ManualDelivery\r\n\r\n11: PendingBundleDelivery\r\n\r\n12: ProcessingBundleDelivery\r\n\r\n13: FinishingBundleDelivery\r\n\r\n49: Suspended\r\n\r\n50: Completed\r\n\r\n100: Cancelled\r\n\r\n102: Void\r\n\r\n150: CancelledTest\r\n\r\n151: ClosedTest\r\n\r\n200: Invoiced\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "OrderStatusEntry": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Order status.",
            "nullable": true
          },
          "effectiveTime": {
            "type": "string",
            "description": "The time and date (in UTC) at which this status was applied to the order.",
            "format": "date-time"
          },
          "source": {
            "type": "string",
            "description": "A brief description of the source of the status change.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OrderSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/Order"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "OrderType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          100,
          -1
        ],
        "type": "integer",
        "description": "0: DocumentDelivery\r\n\r\n1: CopyrightClearance\r\n\r\n2: BookLoan\r\n\r\n3: BookPurchase\r\n\r\n4: Rental\r\n\r\n5: SupplementaryMaterial\r\n\r\n100: ExternalTrans\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "Pages": {
        "type": "object",
        "properties": {
          "isValid": {
            "type": "boolean",
            "readOnly": true
          },
          "parseError": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "originalPages": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalRecordCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ParseCitationsRequest": {
        "type": "object",
        "properties": {
          "citations": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParsingRule": {
        "type": "object",
        "properties": {
          "idType": {
            "type": "string",
            "nullable": true
          },
          "selector": {
            "type": "string",
            "nullable": true
          },
          "selectorRegexp": {
            "type": "string",
            "nullable": true
          },
          "attribute": {
            "type": "string",
            "nullable": true
          },
          "attributeRegexp": {
            "type": "string",
            "nullable": true
          },
          "regexp": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Person": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "middleName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlaceOrderLink": {
        "required": [
          "contentId",
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "minLength": 1,
            "type": "string",
            "description": "Required. User for the order, either email or RFE User Id"
          },
          "contentId": {
            "type": "integer",
            "description": "Required. Unique RFE content id of the content item to order.",
            "format": "int32"
          },
          "navigateOptions": {
            "$ref": "#/components/schemas/PlaceOrderNavigateOptions"
          },
          "useId": {
            "type": "integer",
            "description": "Optional. The id of the rights alias that defines how the user intends to use the ordered article/publication.",
            "format": "int32"
          },
          "billRef": {
            "type": "string",
            "description": "Optional. Client-defined value. CCC does not use this information but it will be associated with the order and available for reporting purposes.",
            "nullable": true
          },
          "costCenter": {
            "type": "string",
            "description": "Optional. Client-defined value. CCC does not use this information but it will be associated with the order and available for reporting purposes.",
            "nullable": true
          },
          "po": {
            "type": "string",
            "description": "Optional. Client-defined value. CCC does not use this information but it will be associated with the order and available for reporting purposes.",
            "nullable": true
          },
          "custOrderNum": {
            "type": "string",
            "description": "Optional. Client-defined value. CCC does not use this information but it will be associated with the order and available for reporting purposes.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlaceOrderLinkResult": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": "Link for placing order in RightFind",
            "nullable": true
          },
          "linkType": {
            "$ref": "#/components/schemas/OrderLinkType"
          }
        },
        "additionalProperties": false
      },
      "PlaceOrderLinkResultSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/PlaceOrderLinkResult"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "PlaceOrderNavigateOptions": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: Default\r\n\r\n1: LibraryDocument\r\n\r\n",
        "format": "int32"
      },
      "PlatformInfo": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PlatformInfoSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/PlatformInfo"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ProcFeeType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          10,
          -1
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: Absolute\r\n\r\n2: PercentageBase\r\n\r\n3: PercentageTotal\r\n\r\n4: PercentageProcFee\r\n\r\n10: Estimated\r\n\r\n-1: Unknown\r\n\r\n",
        "format": "int32"
      },
      "ProxySettings": {
        "type": "object",
        "properties": {
          "proxyEnabled": {
            "type": "boolean",
            "description": "Gets or sets value indicating that proxy function is enabled for the user."
          },
          "warnUserBeforeRedirected": {
            "type": "boolean",
            "description": "Gets or sets value indicating that browser extension should warn user before redirecting to proxy."
          },
          "stanzas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Stanza"
            },
            "description": "Gets or sets array of stanzas describing resources available via proxy.",
            "nullable": true
          },
          "proxyLogoUrl": {
            "type": "string",
            "description": "Gets or sets custom proxy logo image for proxy prompt page",
            "nullable": true
          },
          "proxyConfirmMessage": {
            "type": "string",
            "description": "Gets or sets message to display in browser extension before redirecting user to proxy.",
            "nullable": true
          },
          "proxyServerUrl": {
            "type": "string",
            "description": "Gets or sets proxy server url configured for the client.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProxySettingsSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/ProxySettings"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RFEAuthenticationMode": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: UsernamePassword\r\n\r\n1: SAML\r\n\r\n",
        "format": "int32"
      },
      "RegisterUsagesRequest": {
        "required": [
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "minLength": 1,
            "type": "string",
            "description": "Required. Email address or id of the user who's rights should be checked."
          },
          "contentId": {
            "type": "integer",
            "description": "Infotrieve Catalog Id of the content to check the user's rights to. Specify one and only one of: ContentId or Citation.",
            "format": "int32"
          },
          "citation": {
            "$ref": "#/components/schemas/OrderCitation"
          },
          "useId": {
            "type": "integer",
            "description": "The id of the rights alias that defines how the user intends to use the ordered article/publication.",
            "format": "int32"
          },
          "copies": {
            "type": "integer",
            "description": "Redundant. Not used any more.",
            "format": "int32"
          },
          "locationOverride": {
            "type": "string",
            "description": "Optional. Override default user location.",
            "nullable": true
          },
          "grantingCollection": {
            "type": "string",
            "description": "Name of clients collection for clearance.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Optional. Override article/publication title.",
            "nullable": true
          },
          "referenceNum": {
            "type": "string",
            "description": "Optional. Override default user Billing Reference.",
            "nullable": true
          },
          "costCenter": {
            "type": "string",
            "description": "Optional. Override default user cost center.",
            "nullable": true
          },
          "po": {
            "type": "string",
            "description": "Optional. Override default user PO.",
            "nullable": true
          },
          "custOrderNum": {
            "type": "string",
            "description": "The default customer order number for this client.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RelatedItemType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "0: Unset\r\n\r\n1: Audio\r\n\r\n2: Video\r\n\r\n3: Image\r\n\r\n",
        "format": "int32"
      },
      "RightsAliasModel": {
        "type": "object",
        "properties": {
          "aliasId": {
            "type": "integer",
            "description": "Alias Id.",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "description": "Name of the rights alias.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Full description.",
            "nullable": true
          },
          "aliasCopyright": {
            "type": "string",
            "description": "The 'native' copyrights associated with the right alias. Please refer to the Service Catalog help page for a list of these rights.",
            "nullable": true
          },
          "displayOrder": {
            "type": "integer",
            "description": "Placement of this rights alias when displayed to the user in RightFind.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "RightsAliasModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RightsAliasModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RightsByCategoryModel": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Category name.",
            "nullable": true
          },
          "permissions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RightsPermissionModel"
            },
            "description": "Right aliases which belongs to certian category.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RightsPermissionModel": {
        "type": "object",
        "properties": {
          "right": {
            "type": "string",
            "description": "Right name.",
            "nullable": true
          },
          "covered": {
            "type": "boolean",
            "description": "Defines if the right is covered for certain user based on the content id and client configuration."
          },
          "terms": {
            "type": "string",
            "description": "Terms string.",
            "default": "",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RightsRequest": {
        "required": [
          "user"
        ],
        "type": "object",
        "properties": {
          "user": {
            "minLength": 1,
            "type": "string",
            "description": "Required. Email address or id of the user who's rights should be checked."
          },
          "contentId": {
            "type": "integer",
            "description": "Infotrieve Catalog Id of the content to check the user's rights to. Specify one and only one of: ContentId or Citation.",
            "format": "int32"
          },
          "citation": {
            "$ref": "#/components/schemas/OrderCitation"
          },
          "internalOnly": {
            "type": "boolean",
            "description": "Optional. True to check rights granted by company-internal collections/agreements only. False to include all collections (including Infotrieve). The default is False."
          },
          "permissionsOnly": {
            "type": "boolean",
            "description": "Optional. True to determine the cost of obtaining permissions only (the copy is already in possession). False to determine the cost of a document delivery. The default is True."
          }
        },
        "additionalProperties": false
      },
      "RightsSummaryModel": {
        "type": "object",
        "properties": {
          "contentId": {
            "type": "integer",
            "description": "Content Id.",
            "format": "int32"
          },
          "rights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RightsByCategoryModel"
            },
            "description": "List of rights defined by content id.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RightsSummaryModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RightsSummaryModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "RightsSummaryRequest": {
        "required": [
          "contentIds"
        ],
        "type": "object",
        "properties": {
          "contentIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Required. Content Ids collection."
          }
        },
        "additionalProperties": false
      },
      "SearchBlockType": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "0: FreeText\r\n\r\n1: Synonym\r\n\r\n2: Descriptor\r\n\r\n3: Vocab\r\n\r\n4: Operator\r\n\r\n",
        "format": "int32"
      },
      "SearchLibraryModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchLibraryModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchLibraryModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SearchMatch": {
        "type": "object",
        "properties": {
          "contentId": {
            "type": "integer",
            "format": "int32"
          },
          "score": {
            "type": "number",
            "format": "double"
          },
          "citation": {
            "$ref": "#/components/schemas/SearchMatchCitation"
          },
          "abstract": {
            "type": "string",
            "nullable": true
          },
          "titleHighlights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentSearchHighlightModel"
            },
            "nullable": true
          },
          "abstractHighlights": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentSearchHighlightModel"
            },
            "nullable": true
          },
          "clips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Clip"
            },
            "nullable": true
          },
          "descriptorCounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DescriptorCount"
            },
            "nullable": true
          },
          "descriptors": {
            "$ref": "#/components/schemas/ContentDescriptorList"
          },
          "inHoldings": {
            "type": "boolean",
            "nullable": true
          },
          "immediateSourcingProbable": {
            "type": "boolean",
            "nullable": true
          },
          "orderUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchMatchCitation": {
        "type": "object",
        "properties": {
          "genre": {
            "$ref": "#/components/schemas/Genres"
          },
          "genreString": {
            "type": "string",
            "nullable": true
          },
          "genreSubType": {
            "$ref": "#/components/schemas/GenreSubType"
          },
          "genreSubTypeString": {
            "type": "string",
            "nullable": true
          },
          "standardNum": {
            "type": "string",
            "nullable": true
          },
          "doi": {
            "type": "string",
            "nullable": true
          },
          "pmid": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "publicationName": {
            "type": "string",
            "nullable": true
          },
          "volume": {
            "type": "string",
            "nullable": true
          },
          "issue": {
            "type": "string",
            "nullable": true
          },
          "pages": {
            "type": "string",
            "nullable": true
          },
          "startPage": {
            "type": "string",
            "nullable": true
          },
          "pageCount": {
            "type": "string",
            "nullable": true
          },
          "authors": {
            "type": "string",
            "nullable": true
          },
          "publisher": {
            "type": "string",
            "nullable": true
          },
          "publicationDate": {
            "type": "string",
            "nullable": true
          },
          "supplementOrChapter": {
            "type": "string",
            "nullable": true
          },
          "group1": {
            "type": "string",
            "nullable": true
          },
          "group2": {
            "type": "string",
            "nullable": true
          },
          "group3": {
            "type": "string",
            "nullable": true
          },
          "groupDateCode1": {
            "type": "string",
            "nullable": true
          },
          "groupDateCode2": {
            "type": "string",
            "nullable": true
          },
          "groupDateCodeRange": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "eStandardNum": {
            "type": "string",
            "nullable": true
          },
          "isbn": {
            "type": "string",
            "nullable": true
          },
          "eisbn": {
            "type": "string",
            "nullable": true
          },
          "seriesISSN": {
            "type": "string",
            "nullable": true
          },
          "seriesEISSN": {
            "type": "string",
            "nullable": true
          },
          "pmcid": {
            "type": "string",
            "nullable": true
          },
          "coden": {
            "type": "string",
            "nullable": true
          },
          "sici": {
            "type": "string",
            "nullable": true
          },
          "lccn": {
            "type": "string",
            "nullable": true
          },
          "oclcNum": {
            "type": "string",
            "nullable": true
          },
          "patentNum": {
            "type": "string",
            "nullable": true
          },
          "abstractNumber": {
            "type": "string",
            "nullable": true
          },
          "callNumber": {
            "type": "string",
            "nullable": true
          },
          "altTitles": {
            "type": "object",
            "properties": {
              "None": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "MedlineTA": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "nullable": true
          },
          "issn": {
            "type": "string",
            "nullable": true
          },
          "extendedProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "libraryDocumentCustomFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryDocumentCustomField"
            },
            "nullable": true
          },
          "stdid": {
            "type": "string",
            "nullable": true
          },
          "estdid": {
            "type": "string",
            "nullable": true
          },
          "parentAltTitles": {
            "type": "object",
            "properties": {
              "None": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "MedlineTA": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "additionalProperties": false,
            "nullable": true
          },
          "eventPlace": {
            "type": "string",
            "nullable": true
          },
          "parentEdition": {
            "type": "string",
            "nullable": true
          },
          "parentEditor": {
            "type": "string",
            "nullable": true
          },
          "parentPubDate": {
            "type": "string",
            "nullable": true
          },
          "parentPublisher": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchMatchIEnumerableSuccessLuceneSearchResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "totalResultsRequested": {
            "type": "integer",
            "format": "int32"
          },
          "totalResultsReturned": {
            "type": "integer",
            "format": "int32"
          },
          "totalResultsFound": {
            "type": "integer",
            "format": "int32"
          },
          "processingTimeMilliseconds": {
            "type": "integer",
            "format": "int64"
          },
          "vocabAggregates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContentSearchAggregationResult"
            },
            "nullable": true
          },
          "descriptorAggregates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AggregateDescriptor"
            },
            "nullable": true
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchMatch"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SearchMatchIEnumerableSuccessPagedInfoResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchMatch"
            },
            "description": "Request result",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SearchMatchIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchMatch"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SearchMatchSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/SearchMatch"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SearchPatternType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: Contains\r\n\r\n1: StartWith\r\n\r\n",
        "format": "int32"
      },
      "SearchPubDateRange": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
        ],
        "type": "integer",
        "description": "0: ALL\r\n\r\n1: CURYEAR\r\n\r\n2: LAST2\r\n\r\n3: LAST5\r\n\r\n4: LAST10\r\n\r\n5: LAST1M\r\n\r\n6: LAST3M\r\n\r\n7: LAST6M\r\n\r\n8: LAST12M\r\n\r\n9: CUSTOM\r\n\r\n",
        "format": "int32"
      },
      "SearchSorting": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: Score\r\n\r\n1: Recent\r\n\r\n2: Title\r\n\r\n",
        "format": "int32"
      },
      "SearchSuggestion": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "nullable": true
          },
          "code": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "type": {
            "$ref": "#/components/schemas/SuggestionType"
          },
          "synonymId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "descriptorId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "descriptor": {
            "type": "string",
            "nullable": true
          },
          "categoryId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "category": {
            "type": "string",
            "nullable": true
          },
          "textColor": {
            "type": "string",
            "nullable": true
          },
          "bgColor": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SearchSuggestionIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchSuggestion"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SetDocumentTagsRequest": {
        "required": [
          "tags"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removeTags": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SimpleLuceneSearchRequest": {
        "type": "object",
        "properties": {
          "search": {
            "type": "string",
            "description": "Enter search query.",
            "nullable": true
          },
          "recordCount": {
            "type": "integer",
            "description": "Record count.",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SiteParsingRuleModel": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "nullable": true
          },
          "page": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParsingRule"
            },
            "nullable": true
          },
          "meta": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParsingRule"
            },
            "nullable": true
          },
          "includeFrames": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "SiteParsingRuleModelArraySuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SiteParsingRuleModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Source": {
        "type": "object",
        "properties": {
          "abstractNumber": {
            "type": "string",
            "nullable": true
          },
          "accessed": {
            "type": "string",
            "nullable": true
          },
          "acronym": {
            "type": "string",
            "nullable": true
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "callNumber": {
            "type": "string",
            "nullable": true
          },
          "chapterNumber": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "coden": {
            "type": "string",
            "nullable": true
          },
          "collectionEditors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "collectionTitle": {
            "type": "string",
            "nullable": true
          },
          "conferenceName": {
            "type": "string",
            "nullable": true
          },
          "conferencePlace": {
            "type": "string",
            "nullable": true
          },
          "containerTitle": {
            "type": "string",
            "nullable": true
          },
          "contentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "libraryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "libraryDocId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "countryRegion": {
            "type": "string",
            "nullable": true
          },
          "doi": {
            "type": "string",
            "nullable": true
          },
          "edition": {
            "type": "string",
            "nullable": true
          },
          "editors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "eisbn": {
            "type": "string",
            "nullable": true
          },
          "eissn": {
            "type": "string",
            "nullable": true
          },
          "eStandardNumber": {
            "type": "string",
            "nullable": true
          },
          "eventDate": {
            "type": "string",
            "nullable": true
          },
          "genre": {
            "type": "string",
            "nullable": true
          },
          "group1": {
            "type": "string",
            "nullable": true
          },
          "group2": {
            "type": "string",
            "nullable": true
          },
          "isbn": {
            "type": "string",
            "nullable": true
          },
          "issn": {
            "type": "string",
            "nullable": true
          },
          "issue": {
            "type": "string",
            "nullable": true
          },
          "journalAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "jurisdiction": {
            "type": "string",
            "nullable": true
          },
          "lccn": {
            "type": "string",
            "nullable": true
          },
          "oclc": {
            "type": "string",
            "nullable": true
          },
          "pages": {
            "type": "string",
            "nullable": true
          },
          "pagesCount": {
            "type": "string",
            "nullable": true
          },
          "patentNumber": {
            "type": "string",
            "nullable": true
          },
          "pmcid": {
            "type": "string",
            "nullable": true
          },
          "pmid": {
            "type": "string",
            "nullable": true
          },
          "publicationDate": {
            "type": "string",
            "nullable": true
          },
          "publisher": {
            "type": "string",
            "nullable": true
          },
          "publisherPlace": {
            "type": "string",
            "nullable": true
          },
          "referenceOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sectionStatement": {
            "type": "string",
            "nullable": true
          },
          "sici": {
            "type": "string",
            "nullable": true
          },
          "sourceType": {
            "type": "string",
            "nullable": true
          },
          "standardNumber": {
            "type": "string",
            "nullable": true
          },
          "standardVersion": {
            "type": "string",
            "nullable": true
          },
          "startPage": {
            "type": "string",
            "nullable": true
          },
          "supplementOrChapter": {
            "type": "string",
            "nullable": true
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "calculatedTag": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "urlAN": {
            "type": "string",
            "nullable": true
          },
          "volume": {
            "type": "string",
            "nullable": true
          },
          "databaseName": {
            "type": "string",
            "nullable": true
          },
          "dbOnlineFromDate": {
            "type": "string",
            "nullable": true
          },
          "citedDate": {
            "type": "string",
            "nullable": true
          },
          "publicationName": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "medium": {
            "type": "string",
            "nullable": true
          },
          "collectionNumber": {
            "type": "string",
            "nullable": true
          },
          "authority": {
            "type": "string",
            "nullable": true
          },
          "submitted": {
            "type": "string",
            "nullable": true
          },
          "event": {
            "type": "string",
            "nullable": true
          },
          "customField1": {
            "type": "string",
            "nullable": true
          },
          "customField2": {
            "type": "string",
            "nullable": true
          },
          "customField3": {
            "type": "string",
            "nullable": true
          },
          "customField4": {
            "type": "string",
            "nullable": true
          },
          "customField5": {
            "type": "string",
            "nullable": true
          },
          "customField6": {
            "type": "string",
            "nullable": true
          },
          "customField7": {
            "type": "string",
            "nullable": true
          },
          "customField8": {
            "type": "string",
            "nullable": true
          },
          "customField9": {
            "type": "string",
            "nullable": true
          },
          "customField10": {
            "type": "string",
            "nullable": true
          },
          "customDate1": {
            "type": "string",
            "nullable": true
          },
          "customDate2": {
            "type": "string",
            "nullable": true
          },
          "customDate3": {
            "type": "string",
            "nullable": true
          },
          "customDate4": {
            "type": "string",
            "nullable": true
          },
          "customDate5": {
            "type": "string",
            "nullable": true
          },
          "customDate6": {
            "type": "string",
            "nullable": true
          },
          "customDate7": {
            "type": "string",
            "nullable": true
          },
          "customInt1": {
            "type": "string",
            "nullable": true
          },
          "customInt2": {
            "type": "string",
            "nullable": true
          },
          "customInt3": {
            "type": "string",
            "nullable": true
          },
          "customInt4": {
            "type": "string",
            "nullable": true
          },
          "customInt5": {
            "type": "string",
            "nullable": true
          },
          "reservedField1": {
            "type": "string",
            "nullable": true
          },
          "reservedField2": {
            "type": "string",
            "nullable": true
          },
          "reservedField3": {
            "type": "string",
            "nullable": true
          },
          "reservedField4": {
            "type": "string",
            "nullable": true
          },
          "reservedField5": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SourceMetadata"
          },
          "translators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "composers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "shortTitle": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "numberOfVolumes": {
            "type": "string",
            "nullable": true
          },
          "section": {
            "type": "string",
            "nullable": true
          },
          "archive": {
            "type": "string",
            "nullable": true
          },
          "archiveLocation": {
            "type": "string",
            "nullable": true
          },
          "databaseProvider": {
            "type": "string",
            "nullable": true
          },
          "dimensions": {
            "type": "string",
            "nullable": true
          },
          "references": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "scale": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SourceMetadata": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "synchronized": {
            "type": "boolean"
          },
          "appVersion": {
            "type": "string",
            "nullable": true
          },
          "createDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdateDate": {
            "type": "string",
            "format": "date-time"
          },
          "sharedLibraryLastUpdateDate": {
            "type": "string",
            "format": "date-time"
          },
          "appPlatform": {
            "type": "string",
            "nullable": true
          },
          "appProduct": {
            "type": "string",
            "nullable": true
          },
          "dataSource": {
            "type": "string",
            "nullable": true
          },
          "origin": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SpecialInstructions": {
        "enum": [
          0,
          1,
          2,
          4,
          8,
          16,
          32,
          64,
          128,
          512,
          1024,
          32768,
          65536,
          1048576,
          67108864,
          536870912,
          1073741824
        ],
        "type": "integer",
        "description": "0: None\r\n\r\n1: TitlePageRequired\r\n\r\n2: CleanCopyRequired\r\n\r\n2: FDAQualityRequired\r\n\r\n4: ColorRequired\r\n\r\n8: ImmediateFillOnly\r\n\r\n16: EnglishOnly\r\n\r\n32: EnglishPreferred\r\n\r\n64: TOCReq\r\n\r\n128: OCRReq\r\n\r\n512: Cheapest\r\n\r\n1024: NoSpecialOrder\r\n\r\n32768: NoEmailFF\r\n\r\n65536: QuietMode\r\n\r\n1048576: TestOrder\r\n\r\n67108864: ExternalFillOnly\r\n\r\n536870912: PublisherOriginalRequired\r\n\r\n1073741824: Custom\r\n\r\n",
        "format": "int32"
      },
      "Stanza": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Gets or sets stanza Id.",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Gets or sets stanza name.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Gets or sets stanza description.",
            "nullable": true
          },
          "patterns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtResourceHostPattern"
            },
            "description": "Gets or sets array of host patterns for the stanza.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "StringSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "string",
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "SuggestionType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "0: History\r\n\r\n1: FreeText\r\n\r\n2: Operator\r\n\r\n3: Descriptor\r\n\r\n",
        "format": "int32"
      },
      "TOCAltId": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: Issn\r\n\r\n1: Isbn\r\n\r\n2: Stdnum\r\n\r\n",
        "format": "int32"
      },
      "TOCArticles": {
        "type": "object",
        "properties": {
          "contentId": {
            "type": "integer",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "format": "int32"
          },
          "volume": {
            "type": "string",
            "nullable": true
          },
          "issue": {
            "type": "string",
            "nullable": true
          },
          "articleCount": {
            "type": "integer",
            "format": "int32"
          },
          "articles": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LibraryDocumentExtOut"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TOCArticlesSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/TOCArticles"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TOCIssue": {
        "type": "object",
        "properties": {
          "issues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "issue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TOCIssueSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/TOCIssue"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TOCStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: Unknown\r\n\r\n1: Available\r\n\r\n2: NotAvailable\r\n\r\n",
        "format": "int32"
      },
      "TOCVolume": {
        "type": "object",
        "properties": {
          "volumes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "volume": {
            "type": "string",
            "nullable": true
          },
          "issues": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "issue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TOCVolumeSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/TOCVolume"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TOCYear": {
        "type": "object",
        "properties": {
          "years": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TOCYearSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/TOCYear"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TagsOperatorType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "description": "0: And\r\n\r\n1: Or\r\n\r\n",
        "format": "int32"
      },
      "TermDefinition": {
        "type": "object",
        "properties": {
          "vocabulary": {
            "type": "string",
            "description": "Vocabulary Id, Vocabulary Guid or name",
            "nullable": true
          },
          "descriptor": {
            "type": "string",
            "description": "Descriptor Id, Topic Guid or name",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TitleNormalizationModel": {
        "type": "object",
        "properties": {
          "pmid": {
            "type": "string",
            "nullable": true
          },
          "originalTitle": {
            "type": "string",
            "nullable": true
          },
          "normalizedTitle": {
            "type": "string",
            "nullable": true
          },
          "isNormalized": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TitleNormalizationModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TitleNormalizationModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TitleNormalizationModelSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/TitleNormalizationModel"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TitleNormalizationRequestModel": {
        "type": "object",
        "properties": {
          "pmid": {
            "type": "string",
            "nullable": true
          },
          "originalTitle": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateItemFromBodyParams": {
        "type": "object",
        "properties": {
          "abstractNumber": {
            "type": "string",
            "nullable": true
          },
          "accessed": {
            "type": "string",
            "nullable": true
          },
          "acronym": {
            "type": "string",
            "nullable": true
          },
          "authors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "callNumber": {
            "type": "string",
            "nullable": true
          },
          "chapterNumber": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "coden": {
            "type": "string",
            "nullable": true
          },
          "collectionEditors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "collectionTitle": {
            "type": "string",
            "nullable": true
          },
          "conferenceName": {
            "type": "string",
            "nullable": true
          },
          "conferencePlace": {
            "type": "string",
            "nullable": true
          },
          "containerTitle": {
            "type": "string",
            "nullable": true
          },
          "contentId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "libraryId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "libraryDocId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "contentType": {
            "type": "string",
            "nullable": true
          },
          "countryRegion": {
            "type": "string",
            "nullable": true
          },
          "doi": {
            "type": "string",
            "nullable": true
          },
          "edition": {
            "type": "string",
            "nullable": true
          },
          "editors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "eisbn": {
            "type": "string",
            "nullable": true
          },
          "eissn": {
            "type": "string",
            "nullable": true
          },
          "eStandardNumber": {
            "type": "string",
            "nullable": true
          },
          "eventDate": {
            "type": "string",
            "nullable": true
          },
          "genre": {
            "type": "string",
            "nullable": true
          },
          "group1": {
            "type": "string",
            "nullable": true
          },
          "group2": {
            "type": "string",
            "nullable": true
          },
          "isbn": {
            "type": "string",
            "nullable": true
          },
          "issn": {
            "type": "string",
            "nullable": true
          },
          "issue": {
            "type": "string",
            "nullable": true
          },
          "journalAbbreviation": {
            "type": "string",
            "nullable": true
          },
          "jurisdiction": {
            "type": "string",
            "nullable": true
          },
          "lccn": {
            "type": "string",
            "nullable": true
          },
          "oclc": {
            "type": "string",
            "nullable": true
          },
          "pages": {
            "type": "string",
            "nullable": true
          },
          "pagesCount": {
            "type": "string",
            "nullable": true
          },
          "patentNumber": {
            "type": "string",
            "nullable": true
          },
          "pmcid": {
            "type": "string",
            "nullable": true
          },
          "pmid": {
            "type": "string",
            "nullable": true
          },
          "publicationDate": {
            "type": "string",
            "nullable": true
          },
          "publisher": {
            "type": "string",
            "nullable": true
          },
          "publisherPlace": {
            "type": "string",
            "nullable": true
          },
          "referenceOrder": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "sectionStatement": {
            "type": "string",
            "nullable": true
          },
          "sici": {
            "type": "string",
            "nullable": true
          },
          "sourceType": {
            "type": "string",
            "nullable": true
          },
          "standardNumber": {
            "type": "string",
            "nullable": true
          },
          "standardVersion": {
            "type": "string",
            "nullable": true
          },
          "startPage": {
            "type": "string",
            "nullable": true
          },
          "supplementOrChapter": {
            "type": "string",
            "nullable": true
          },
          "tag": {
            "type": "string",
            "nullable": true
          },
          "calculatedTag": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "url": {
            "type": "string",
            "nullable": true
          },
          "urlAN": {
            "type": "string",
            "nullable": true
          },
          "volume": {
            "type": "string",
            "nullable": true
          },
          "databaseName": {
            "type": "string",
            "nullable": true
          },
          "dbOnlineFromDate": {
            "type": "string",
            "nullable": true
          },
          "citedDate": {
            "type": "string",
            "nullable": true
          },
          "publicationName": {
            "type": "string",
            "nullable": true
          },
          "number": {
            "type": "string",
            "nullable": true
          },
          "medium": {
            "type": "string",
            "nullable": true
          },
          "collectionNumber": {
            "type": "string",
            "nullable": true
          },
          "authority": {
            "type": "string",
            "nullable": true
          },
          "submitted": {
            "type": "string",
            "nullable": true
          },
          "event": {
            "type": "string",
            "nullable": true
          },
          "customField1": {
            "type": "string",
            "nullable": true
          },
          "customField2": {
            "type": "string",
            "nullable": true
          },
          "customField3": {
            "type": "string",
            "nullable": true
          },
          "customField4": {
            "type": "string",
            "nullable": true
          },
          "customField5": {
            "type": "string",
            "nullable": true
          },
          "customField6": {
            "type": "string",
            "nullable": true
          },
          "customField7": {
            "type": "string",
            "nullable": true
          },
          "customField8": {
            "type": "string",
            "nullable": true
          },
          "customField9": {
            "type": "string",
            "nullable": true
          },
          "customField10": {
            "type": "string",
            "nullable": true
          },
          "customDate1": {
            "type": "string",
            "nullable": true
          },
          "customDate2": {
            "type": "string",
            "nullable": true
          },
          "customDate3": {
            "type": "string",
            "nullable": true
          },
          "customDate4": {
            "type": "string",
            "nullable": true
          },
          "customDate5": {
            "type": "string",
            "nullable": true
          },
          "customDate6": {
            "type": "string",
            "nullable": true
          },
          "customDate7": {
            "type": "string",
            "nullable": true
          },
          "customInt1": {
            "type": "string",
            "nullable": true
          },
          "customInt2": {
            "type": "string",
            "nullable": true
          },
          "customInt3": {
            "type": "string",
            "nullable": true
          },
          "customInt4": {
            "type": "string",
            "nullable": true
          },
          "customInt5": {
            "type": "string",
            "nullable": true
          },
          "reservedField1": {
            "type": "string",
            "nullable": true
          },
          "reservedField2": {
            "type": "string",
            "nullable": true
          },
          "reservedField3": {
            "type": "string",
            "nullable": true
          },
          "reservedField4": {
            "type": "string",
            "nullable": true
          },
          "reservedField5": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/SourceMetadata"
          },
          "translators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "recipients": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "composers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Person"
            },
            "nullable": true
          },
          "shortTitle": {
            "type": "string",
            "nullable": true
          },
          "language": {
            "type": "string",
            "nullable": true
          },
          "numberOfVolumes": {
            "type": "string",
            "nullable": true
          },
          "section": {
            "type": "string",
            "nullable": true
          },
          "archive": {
            "type": "string",
            "nullable": true
          },
          "archiveLocation": {
            "type": "string",
            "nullable": true
          },
          "databaseProvider": {
            "type": "string",
            "nullable": true
          },
          "dimensions": {
            "type": "string",
            "nullable": true
          },
          "references": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "scale": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UsageRegistrationResult": {
        "type": "object",
        "properties": {
          "cartId": {
            "type": "integer",
            "description": "Cart Id.",
            "format": "int32"
          },
          "orderId": {
            "type": "integer",
            "description": "Order Id of the matching request.",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UsageRegistrationResultSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/UsageRegistrationResult"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UsageRight": {
        "type": "object",
        "properties": {
          "useId": {
            "type": "integer",
            "description": "Id of the client-defined rights alias describing the usage.",
            "format": "int32"
          },
          "useDescription": {
            "type": "string",
            "description": "Description of usage for rights alias",
            "nullable": true
          },
          "nativeRight": {
            "type": "string",
            "description": "'Native' copyright associated with the rights alias",
            "nullable": true
          },
          "estimatedCostInUSD": {
            "type": "number",
            "description": "Cost to purchase this item in US dollars.",
            "format": "double"
          },
          "estimatedCostInClientCurrency": {
            "type": "number",
            "description": "Cost to purchase this item in the company's native currency. Conversion is done as of the time of the call.",
            "format": "double"
          },
          "internal": {
            "type": "boolean",
            "description": "True if item is in internal holdings."
          },
          "status": {
            "$ref": "#/components/schemas/UsageStatus"
          }
        },
        "additionalProperties": false
      },
      "UsageRightIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageRight"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UsageStatus": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "0: Unavailable\r\n\r\n1: SpecialOrder\r\n\r\n2: Available\r\n\r\n",
        "format": "int32"
      },
      "UserGroupModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "clientId": {
            "type": "integer",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "isSystem": {
            "type": "boolean"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupUserInfo"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserGroupModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserGroupModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserGroupModelSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/UserGroupModel"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "clientId": {
            "type": "integer",
            "format": "int32"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/AppUserStatus"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdate": {
            "type": "string",
            "format": "date-time"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time"
          },
          "lastPasswordChange": {
            "type": "string",
            "format": "date-time"
          },
          "lastLockout": {
            "type": "string",
            "format": "date-time"
          },
          "altUserName": {
            "type": "string",
            "nullable": true
          },
          "friendlyName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "address1": {
            "type": "string",
            "nullable": true
          },
          "address2": {
            "type": "string",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "type": "string",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "altPhone": {
            "type": "string",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "nullable": true
          },
          "divisionName": {
            "type": "string",
            "nullable": true
          },
          "departmentName": {
            "type": "string",
            "nullable": true
          },
          "locationName": {
            "type": "string",
            "nullable": true
          },
          "priceLimit": {
            "type": "number",
            "format": "double"
          },
          "timeZone": {
            "type": "integer",
            "format": "int32"
          },
          "culture": {
            "type": "integer",
            "format": "int32"
          },
          "userGroups": {
            "type": "string",
            "nullable": true
          },
          "userGroupsInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdNameModel"
            },
            "nullable": true
          },
          "viewName": {
            "type": "string",
            "nullable": true
          },
          "billRefEditable": {
            "type": "boolean"
          },
          "costCenterEditable": {
            "type": "boolean"
          },
          "poEditable": {
            "type": "boolean"
          },
          "custOrderNumEditable": {
            "type": "boolean"
          },
          "language": {
            "type": "integer",
            "format": "int32"
          },
          "departmentId": {
            "type": "integer",
            "format": "int32"
          },
          "divisionId": {
            "type": "integer",
            "format": "int32"
          },
          "locationId": {
            "type": "integer",
            "format": "int32"
          },
          "trackingFields": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "fullTextSearchEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "semanticSearchEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "currentSemanticEngine": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserInfoIEnumerableSuccessPagedInfoResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInfo"
            },
            "description": "Request result",
            "nullable": true
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserInfoSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/UserInfo"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserRequest": {
        "required": [
          "address1",
          "city",
          "country",
          "culture",
          "departmentName",
          "divisionName",
          "firstName",
          "friendlyName",
          "languageCulture",
          "lastName",
          "locationName",
          "priceLimit",
          "timeZone",
          "userGroups",
          "viewName"
        ],
        "type": "object",
        "properties": {
          "altUserName": {
            "type": "string",
            "description": "Optional. An alternate user name that, combined with client id, can be used to log this user on. When used, often set to an internal employee id.",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "Required for a new user. Password for the user.",
            "nullable": true
          },
          "friendlyName": {
            "minLength": 1,
            "type": "string",
            "description": "Required. Name by which user is commonly referred to in the application."
          },
          "firstName": {
            "minLength": 1,
            "type": "string",
            "description": "Required. First name."
          },
          "lastName": {
            "minLength": 1,
            "type": "string",
            "description": "Required. Last name."
          },
          "address1": {
            "minLength": 1,
            "type": "string",
            "description": "Required. Address."
          },
          "address2": {
            "type": "string",
            "description": "Optional. Additional address line.",
            "nullable": true
          },
          "address3": {
            "type": "string",
            "description": "Optional. Additional address line.",
            "nullable": true
          },
          "city": {
            "minLength": 1,
            "type": "string",
            "description": "Required. City."
          },
          "state": {
            "type": "string",
            "description": "Optional/Required. State, Province, or equivalent. If country is US or United States, must be one of the following values: AK,AL,AR,AZ,CA,CO,CT,DC,DE,FL,GA,HI,IA,ID,IL,IN,KS,KY,LA,MA,MD,ME,MI,MN,MO,MS,MT,NB,NC,ND,NH,NJ,NM,NV,NY,OH,OK,OR,PA,RI,SC,SD,TN,TX,UT,VA,VT,WA,WI,WV,WY.",
            "nullable": true
          },
          "postalCode": {
            "type": "string",
            "description": "Optional/Required. Zip or other postal code.",
            "nullable": true
          },
          "country": {
            "minLength": 1,
            "type": "string",
            "description": "Required. Country. One of the following values: US,United States,Afghanistan,Albania,Algeria,Andorra,Angola,Argentina,Armenia,Australia,Austria,Azerbaijan,Bahamas,Bahrain,Bangladesh,Barbados,Belarus,Belgium,Belize,Benin,Bermuda,Bhutan,Bolivia,Botswana,Brazil,Brunei,Bulgaria,Burkina Faso,Burma,Burundi,Cambodia,Cameroon,Canada,Cape Verde,Central African Empire,Chad,Chile,China, Peoples Republic,China, Republic (Taiwan),Colombia,Comoros,Congo, Brazzaville,Costa Rica,Croatia,Cuba,Cyprus,Czech Republic,Denmark,Djibouti,Domenica, West Indies,Dominican Republic,Ecuador,Egypt,El Salvador,Equatorial Guinea,Estonia,Ethiopia,Fiji,Finland,France,Gabon,Gambia,Georgia,Georgia,Germany,Ghana,Grand Cayman,Greece,Grenada,Guadeloupe,Guam,Guatemala,Guinea,Guinea Bissau,Guyana,Haiti,Honduras,Hong kong,Hungary,Iceland,India,Indonesia,Iran,Iraq,Ireland,Israel,Italy,Jamaica,Japan,Jordan,Kazakhstan,Kenya,Kuwait,Kyrgyzstan,Latvia,Lebanon,Lesotho,Liberia,Libya,Liechtenstein,Lithuania,Luxembourg,Macao,Madagascar,Malawi,Malaysia,Maldives,Mali,Malta,Martinique,Mauritania,Mauritius,Mexico,Moldova,Monaco,Mongolia,Morocco,Mozambique,Namibia,Nauru,Nepal,Netherlands,Netherlands Antilles,New Zealand,Nicaragua,Niger,Nigeria,North Korea,Norway,Oman,Pakistan,Panama,Papua New Guinea,Paraguay,Peru,Philippines,Poland,Portugal,Puerto rico,Qatar,Romania,Russia,Rwanda,Saint lucia,Sanmarino,Sao Tome and Principe,Saudi Arabia,Senegal,Seychelles,Sierra Leone,Singapore,Slovakia,Slovenia,Solomon Islands,Somalia,South Africa,South Korea,Spain,Sri Lanka,Sudan,Surinam,Swaziland,Sweden,Switzerland,Syria,Tajikistan,Tanzania,Thailand,Togo,Tonga,Trinidad & Tobago,Tunisia,Turkey,Turkmenistan,Uganda,Ukraine,United Arab Emirates,United Kingdom,Uruguay,Usvi,Uzbekistan,Vatican City,Venezuela,Viet-nam,Western Samoa,Yemen,Yugoslavia,Zaire,Zambia,Zimbabwe."
          },
          "phone": {
            "type": "string",
            "description": "Optional. Primary phone number.",
            "nullable": true
          },
          "altPhone": {
            "type": "string",
            "description": "Optional. Alternate phone number.",
            "nullable": true
          },
          "fax": {
            "type": "string",
            "description": "Optional. Fax number.",
            "nullable": true
          },
          "mobilePhone": {
            "type": "string",
            "description": "Optional. Mobile phone number.",
            "nullable": true
          },
          "comments": {
            "type": "string",
            "description": "Optional. Miscellaneous comments.",
            "nullable": true
          },
          "divisionName": {
            "minLength": 1,
            "type": "string",
            "description": "Required. The name of the division the user is in. If no division is specified, the client's default division will be used."
          },
          "departmentName": {
            "minLength": 1,
            "type": "string",
            "description": "Required. The name of the department the user is in. If no department is specified, the division's default department will be used."
          },
          "locationName": {
            "minLength": 1,
            "type": "string",
            "description": "Required. The name of the location where the user is located. If no location is specified, the division's default location will be used."
          },
          "priceLimit": {
            "type": "number",
            "description": "Required. The price limit of the user. Specify 0 to assign no limit or specify -9999.00 to inherit the price limit from the user's department, division, or client record.",
            "format": "double"
          },
          "timeZone": {
            "type": "integer",
            "description": "Required. Timezone index value. Specify 0 to indicate the default timezone - Eastern Standard Time. A list of valid time zone index values can be found here http://msdn.microsoft.com/en-us/library/ms912391.aspx.",
            "format": "int32"
          },
          "culture": {
            "type": "integer",
            "description": "Required. Culture LCID value used to determine various culture-dependant display preferences (time/date formats, for example). Specify 0 to indicate the default culture inherited from the user's department/division/client. A list of valid LCID values can be found here http://msdn.microsoft.com/en-us/library/0h88fahh.aspx.",
            "format": "int32"
          },
          "languageCulture": {
            "type": "integer",
            "description": "Required. Culture LCID value used to determine the preferred langauge of the user. Specify 0 to indicate the default culture inherited from the user's department/division/client. A list of valid LCID values can be found here http://msdn.microsoft.com/en-us/library/0h88fahh.aspx.",
            "format": "int32"
          },
          "userGroups": {
            "minLength": 1,
            "type": "string",
            "description": "Required. List of user group names this user should belong to. Values should be separated by a ';' or ','."
          },
          "viewName": {
            "minLength": 1,
            "type": "string",
            "description": "Required. The name of the view to be assigned to the user."
          },
          "billRef": {
            "type": "string",
            "description": "Optional. The default billing reference for this user.",
            "nullable": true
          },
          "billRefEditable": {
            "type": "boolean",
            "description": "Optional. true to allow the user to change their BillRef on orders; false otherwise. Default value is true.",
            "nullable": true
          },
          "costCenter": {
            "type": "string",
            "description": "Optional. The default cost center for this user.",
            "nullable": true
          },
          "costCenterEditable": {
            "type": "boolean",
            "description": "Optional. true to allow the user to change their Cost Center on orders; false otherwise. Default value is true.",
            "nullable": true
          },
          "po": {
            "type": "string",
            "description": "Optional. The default po for this user.",
            "nullable": true
          },
          "poEditable": {
            "type": "boolean",
            "description": "Optional. true to allow the user to change their PO on orders; false otherwise. Default value is true.",
            "nullable": true
          },
          "custOrderNum": {
            "type": "string",
            "description": "Optional. The default customer order number for this user.",
            "nullable": true
          },
          "custOrderNumEditable": {
            "type": "boolean",
            "description": "Optional. true to allow the user to change their Cust Order Num on orders; false otherwise. Default value is true.",
            "nullable": true
          },
          "allowUpdate": {
            "type": "boolean",
            "description": "Optional. true to allow updating of an existing user that matches by Email. false (or omit the parameter) to only allow additions.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserStatus": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/AppUserStatus"
          },
          "authenticationMode": {
            "$ref": "#/components/schemas/RFEAuthenticationMode"
          }
        },
        "additionalProperties": false
      },
      "UserStatusSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WordPluginCitationStyleModel": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "stylesheet": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WordPluginCitationStyleModelIEnumerableSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WordPluginCitationStyleModel"
            },
            "description": "Request result",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "WordPluginMappingsModel": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "rfe2XSource": {
            "type": "string",
            "nullable": true
          },
          "xSource2CSL": {
            "type": "string",
            "nullable": true
          },
          "xSource2Label": {
            "type": "string",
            "nullable": true
          },
          "quosa2XSource": {
            "type": "string",
            "nullable": true
          },
          "endNote2XSource": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WordPluginMappingsModelSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/WordPluginMappingsModel"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "WordPluginRemoteSettings": {
        "type": "object",
        "properties": {
          "globalStorageApiUrl": {
            "type": "string",
            "nullable": true
          },
          "defaultBibliographyTitle": {
            "type": "string",
            "nullable": true
          },
          "defaultCSLStyleTitle": {
            "type": "string",
            "nullable": true
          },
          "logLevel": {
            "type": "string",
            "nullable": true
          },
          "ssoEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "WordPluginRemoteSettingsSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/WordPluginRemoteSettings"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "WordPluginSynchronizedStylesModel": {
        "type": "object",
        "properties": {
          "stylesToUpsert": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WordPluginCitationStyleModel"
            },
            "nullable": true
          },
          "stylesToDelete": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WordPluginSynchronizedStylesModelSuccessResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/WordPluginSynchronizedStylesModel"
          },
          "status": {
            "$ref": "#/components/schemas/APIResponseStatus"
          },
          "message": {
            "type": "string",
            "description": "Error message (not null when Status is \"Error\")",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of validation errors (not null when request validation is failed)",
            "nullable": true,
            "readOnly": true
          },
          "errorCode": {
            "type": "string",
            "description": "Error code (not null when Status is \"Error\")",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "Please insert JWT with Bearer into field",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}